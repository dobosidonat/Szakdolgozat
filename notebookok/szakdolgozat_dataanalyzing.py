# -*- coding: utf-8 -*-
"""Szakdolgozat_DataAnalyzing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qbSpqJ5Y7aEJY8wY1QtgXQPg_qL4An4I
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import matplotlib.colors as mcolors
# %matplotlib inline

"""#Data Analyzes
A kapott .csv fájlokon végzek különböző elemzéseket, kimutatásokat csinálok.
A pandas, a mathplotlib, a seaborn és a numpy Phyton könyvtárakat fogom használni.

##Ligue 1

###.csv file beolvasása és utótisztítása
"""

L1=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/Ligue1_vegleges.csv")

del L1["Unnamed: 0"]

pd.isnull(L1).sum()

L1[pd.isnull(L1["Nation"])][["Player","Nation"]]

L1=L1[L1["Player"]!="Guemissongui Ouattara"]
L1=L1[L1["Player"]!="Anthony Walongwa"]
L1=L1[L1["Player"]!="Amir Arli"]

pd.isnull(L1).sum()

L1=L1.fillna(0)

pd.isnull(L1).sum()

#A későbbi kimutatások miatt hozzáadtam 2 új oszlopot
L1["Player(Team)"]=L1["Player"]+ "(" + L1["Team"] + ")"
L1["Season(Player)"]=L1["Season"]+ "(" + L1["Player"] + ")"

L1.head()

L1.columns

"""###2022-2023
####A 2022-2023-as szezon statisztikái, azok elemzése.

####A dataframe statisztikáinak elemzése, összehasonlítások, rangsorolások
"""

L12023=L1[L1["Season"]=="2022-2023"]
L12023

#Értékesített és kihagyott büntetők aránya
L1_Pen_Attempted_2023=L12023["PKatt"].sum()
L1_Pen_Scored_2023=L12023["Penalty_Kicks_Made"].sum()
L1_Pen_Missed_2023=L1_Pen_Attempted_2023-L1_Pen_Scored_2023

plt.figure(figsize=(13,6))
plt.title("Értékesített és kihagyott büntetők aránya (2023)")
data=[L1_Pen_Scored_2023,L1_Pen_Missed_2023]
colors=["green","red"]
labels=["Belőtt büntetők","Kihagyott büntetők"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Top 10 legtöbb játékost adó nemzet (2023)
jatekosok_szama = L12023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")

# Oszlopdiagram létrehozáL1
plt.figure(figsize=(10, 6))
plt.bar(top_10_nemzet['Nation'], top_10_nemzet['Játékosok száma'], color='skyblue')
plt.xlabel('Nemzet')
plt.ylabel('Játékosok száma')
plt.title('Nemzetek szerinti játékosok száma')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Az előző kimutatás csak kördiagrammal
jatekosok_szama = L12023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")
plt.figure(figsize=(8, 8))
plt.pie(top_10_nemzet['Játékosok száma'], labels=top_10_nemzet['Nation'], autopct='%1.1f%%')
plt.title('Top 10 nemzet játékosainak aránya')
plt.axis('equal')
plt.tight_layout()
plt.show()

#Top 10 gólpassz adó
top_10_gólpassz_adó_2023_L1 = L12023.groupby('Player')["Ast"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_gólpassz_adó_2023_L1['Player'], top_10_gólpassz_adó_2023_L1['Ast'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Legjobb gólpassz adók csapatonként
legjobb_golpassz_adok_csapatonként = L12023.groupby('Team').apply(lambda x: x.nlargest(1, 'Ast')).reset_index(drop=True)
legjobb_golpassz_adok_csapatonként=legjobb_golpassz_adok_csapatonként.sort_values(by="Ast",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(legjobb_golpassz_adok_csapatonként['Player(Team)'], legjobb_golpassz_adok_csapatonként['Ast'])
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=65)
plt.tight_layout()
plt.show()

#Top 10 gólpasssz adó és hogy hány gólpasszuknak kellett volna lennie (xA)
gp_xA_2023_L1 = L12023.groupby('Player').agg({"Ast":'sum','xA':'sum'}).nlargest(10,'Ast').reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(20, 8))
bar_width = 0.4
index = range(len(gp_xA_2023_L1))
plt.bar(index, gp_xA_2023_L1['Ast'], bar_width, color='skyblue', label='Gólpasszok')
plt.bar([i + bar_width for i in index], gp_xA_2023_L1['xA'], bar_width, color='orange', label='xA mutató')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Játékos gólpasszok és xA mutatója')
plt.xticks([i + bar_width/2 for i in index], gp_xA_2023_L1['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb gólban szerepet vállaló játékos
top10_ga_L12023=L12023.nlargest(10,"G+A")
top10_ga_L12023=top10_ga_L12023.sort_values(by="G+A",ascending=False)

plt.figure(figsize=(20, 8))
plt.bar(top10_ga_L12023["Player"], top10_ga_L12023['Gls'], color='skyblue', label='Gól')
plt.bar(top10_ga_L12023["Player"], top10_ga_L12023['Ast'], bottom=top10_ga_L12023['Gls'], color='orange', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb gólban szerepet vállaló játékos')
plt.xticks([i + bar_width/2 for i in index], top10_ga_L12023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 góllövő és hogy ők hány gólt kellett vna szerezniük (xG).
top10_scorer_L12023=L12023.nlargest(10,"Gls")
top10_scorer_L12023=top10_ga_L12023.sort_values(by="Gls",ascending=False)

plt.figure(figsize=(20, 8))
bar_width = 0.4
index = range(len(top10_scorer_L12023))
plt.bar(index, top10_scorer_L12023['Gls'], bar_width, color='skyblue', label='Kaput találó lövések száma')
plt.bar([i + bar_width for i in index], top10_scorer_L12023['xG'], bar_width, color='orange', label='xG')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('#Top 10 góllövő és hogy ők hány lövésből szereztek annyi gólt amennyit (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_scorer_L12023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Pozíciónkénti gólok száma
gls_per_pos_L12023=L12023.groupby('Pos')['Gls'].sum().reset_index()
gls_per_pos_L12023=gls_per_pos_L12023.sort_values(by="Gls",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(gls_per_pos_L12023['Pos'], gls_per_pos_L12023['Gls'])
plt.xlabel('Pozíció')
plt.ylabel('Gólok száma')
plt.title('Pozíciónkénti gólok száma (2022-23)')

plt.tight_layout()
plt.show()

#Sárga és piros lapok megoszlása
yellow_L12023=L12023["CrdY"].sum()
red_L12023=L12023["CrdR"].sum()
plt.figure(figsize=(13,6))
plt.title("Sárga és piros lapok megoszlása (2023)")
data=[yellow_L12023,red_L12023]
colors=["yellow","red"]
labels=["Sárga lapok","Piros lapok"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Legtöbb büntetőlappal rendelkező játékosok
L12023["cardssum"]=L12023['CrdY']+L12023['CrdR']
top10_carded_L12023=L12023.nlargest(10,"cardssum")
top10_carded_L12023=top10_carded_L12023.sort_values(by="cardssum",ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(top10_carded_L12023["Player(Team)"], top10_carded_L12023['CrdY'], color='yellow', label='Sárga lap')
plt.bar(top10_carded_L12023["Player(Team)"], top10_carded_L12023['CrdR'], bottom=top10_carded_L12023['CrdY'], color='red', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('Lapok száma')
plt.title('#Top 10 legtöbb büntetőlappal rendelkező játékosok (2022-2023)')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

#Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_L12023=L12023[L12023["Pos"]=="GK"]
KeepertoCompare_L12023=Keepers_L12023[Keepers_L12023["MP"]>=10]
top10_savepercent_L12023=KeepertoCompare_L12023.nlargest(10,"Save%")
top10_savepercent_L12023=top10_savepercent_L12023.sort_values(by="Save%",ascending=False)

plt.figure(figsize=(12, 6))
bar_width = 0.4
index = range(len(top10_savepercent_L12023))
plt.bar(index, top10_savepercent_L12023['SoTA'], bar_width, color='skyblue', label='Kapott lövések')
plt.bar([i + bar_width for i in index], top10_savepercent_L12023['GA'], bar_width, color='orange', label='Kapott gólok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_savepercent_L12023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_L12023=L12023[L12023["Pos"]=="GK"]
KeepertoCompare_L12023=Keepers_L12023[Keepers_L12023["MP"]>=10]
top10_cs_L12023=KeepertoCompare_L12023.nlargest(10,"CS%")
top10_cs_L12023=top10_cs_L12023.sort_values(by="MP",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_cs_L12023))
plt.bar(index, top10_cs_L12023['MP'], bar_width, color='skyblue', label='Lejátszott meccsek száma')
plt.bar([i + bar_width for i in index], top10_cs_L12023['CS'], bar_width, color='orange', label='Kapott gól nélküli meccsek száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_cs_L12023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobb passzpontossággal rendelkező játékos
gp_pp_L12023 = L12023.groupby('Player').agg({"Ast":'sum','Att':'sum','Cmp':'sum','Cmp%':'sum'}).nlargest(10,'Ast').reset_index()
top10_pp_L12023=gp_pp_L12023.sort_values(by="Cmp%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_pp_L12023))
plt.bar(index, top10_pp_L12023['Att'], bar_width, color='skyblue', label='Passzok száma')
plt.bar([i + bar_width for i in index], top10_pp_L12023['Cmp'], bar_width, color='orange', label='Pontos passzok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_pp_L12023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobban szerelő játékos
L12023["Tkl_Tkl%"]=L12023['TklW']/L12023['Tkl']*100
top10_tkl_L12023 = L12023.groupby('Player').agg({"Tkl":'sum','TklW':'sum','Tkl_Tkl%':'sum'}).nlargest(10,'TklW').reset_index()
top10_tkl_L12023 = top10_tkl_L12023.sort_values(by="Tkl_Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_tkl_L12023))
plt.bar(index, top10_tkl_L12023['Tkl'], bar_width, color='skyblue', label='Szerelési kísérletek száma')
plt.bar([i + bar_width for i in index], top10_tkl_L12023['TklW'], bar_width, color='orange', label='Sikeres szerelések száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_tkl_L12023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb párharcot nyerő játékos
top10_chl_L12023 = L12023.groupby('Player').agg({"Challenges_Tkl":'sum','Lost':'sum','Tkl%':'sum'}).nlargest(10,'Challenges_Tkl').reset_index()
top10_chl_L12023 = top10_chl_L12023.sort_values(by="Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_chl_L12023["Player"], top10_chl_L12023['Challenges_Tkl'], color='lightgreen', label='Győztes párharcok')
plt.bar(top10_chl_L12023["Player"], top10_chl_L12023['Lost'], bottom=top10_chl_L12023['Challenges_Tkl'], color='red', label='Vesztes párharcok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb párharcot nyerő játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_chl_L12023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#'Top 10 legtöbb szereléssel és labdaszerzéssel rendelkező játékos
top10_TklInt_L12023 = L12023.groupby('Player(Team)').agg({"Tkl":'sum','Int':'sum','Tkl+Int':'sum'}).nlargest(10,'Tkl+Int').reset_index()
top10_TklInt_L12023 = top10_TklInt_L12023.sort_values(by="Tkl+Int",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_TklInt_L12023["Player(Team)"], top10_TklInt_L12023['Tkl'], color='skyblue', label='Tackle')
plt.bar(top10_TklInt_L12023["Player(Team)"], top10_TklInt_L12023['Int'], bottom=top10_TklInt_L12023['Tkl'], color='brown', label='Interception')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb szereléssel és labdaszerzéssel rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_TklInt_L12023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Felszabadítások illetve lövéshez vezető hibák összehasonlítása
top10_clrerr_L12023 = L12023.groupby('Player(Team)').agg({"Clr":'sum','Err':'sum'}).nlargest(10,'Clr').reset_index()
top10_clrerr_L12023 = top10_clrerr_L12023.sort_values(by="Clr",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_clrerr_L12023))
plt.bar(index, top10_clrerr_L12023['Clr'], bar_width, color='skyblue', label='Felszabadítások száma')
plt.bar([i + bar_width for i in index], top10_clrerr_L12023['Err'], bar_width, color='orange', label='Lövéshez vezető hibák száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_clrerr_L12023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Legtöbb lövéshez vezető hibát vétő játékosok
top_10_error_maker_L12023 = L12023.groupby('Player(Team)')["Err"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_error_maker_L12023['Player(Team)'], top_10_error_maker_L12023['Err'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Lövéshez vezető hibák száma')
plt.title('Top 10 legtöbb adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Top 10 legtöbb fejpárbajt nyerő játékos

top10_airduel_L12023 = L12023.groupby('Player(Team)').agg({"Won":'sum','Lost':'sum'}).nlargest(10,'Won').reset_index()
top10_airduel_L12023 = top10_airduel_L12023.sort_values(by="Won",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_airduel_L12023))
plt.bar(index, top10_airduel_L12023['Won'], bar_width, color='skyblue', label='Megnyert fejpárbajok')
plt.bar([i + bar_width for i in index], top10_airduel_L12023['Lost'], bar_width, color='orange', label='Elveszett fejpárbajok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_airduel_L12023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

"""####Összefüggések keresése
Bizonoys játékosok statisztikái feltűnően gyengébbek az elvártnál, ezért meg szeretném vizsgálni, hogy ezen játékosok mélyrepülése hogyan hatott a csapatuk teljesítményére. Ehhez szükségem volt a bajnoki tabellára
"""

L1_table=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/Ligue1_tables.csv")

L1_table

del L1_table["Unnamed: 0"]

L1_table

"""#####Ligue 1 tabella 2022-2023"""

L1_table_2023=L1_table[L1_table["Season"]=="2022-2023"]
L1_table_2023

"""#####Az Lens szárnyalása"""

Lens=L1_table[L1_table["Squad"]=="Lens"]
Lens=Lens[["Rk","Season"]].sort_values(by='Season', ascending=True)

xpoints = np.array(Lens["Season"])
ypoints = np.array(Lens["Rk"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Lens["Rk"], label='Helyezés', marker='s')

plt.title('Az Lens elmúlt 5 évben elért bajnoki helyezései', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Helyezés', fontsize=12)
plt.legend()
plt.show()

"""Mint az látható nagy meglepetésre az Lens a 2-ik, bajnokok ligája indulást jelentő helyen végzett a 2022-2023-as kiírásban, decára annak hogy ez volt csupán a harmadik szezonja a csapatnak az első osztályban és az előtte levő 2 szezonban egyaránt 7-ik helyen végeztek. Ez bravúr a javából. Megvizsgáltam hát a meghatározó játékosainak teljesítményét."""

Lens=L1_table[L1_table["Squad"]=="Lens"]
Lens_gf_ga=Lens[["Season","GF","GA"]].sort_values(by='Season', ascending=True)

gf = np.array(Lens_gf_ga["GF"])
ga = np.array(Lens_gf_ga["GA"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gf, label='Szerzett gólok', marker='o')
plt.plot(xpoints, ga, label='Kapott gólok', marker='s')

plt.title('Lens lőtt és kapott góljai az elmúlt 5 szezonban', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Lőtt és kapott gólok', fontsize=12)
plt.legend()
plt.show()

"""Az ábrából kitűnik, hogy a korábbi évekhez képest valamennyivel több gólt rúgtak viszont sokkal kevesebb gólt kaptak. Így itt inkább a védők és a középpályások teljesítményét elemeztem.

######Középpályások
"""

Lens2022_2023=L12023[L12023["Team"]=="Lens"]
Lens2022_2023_df=Lens2022_2023[Lens2022_2023['Pos']=="MF"]
Lens2022_2023_df=Lens2022_2023_df[Lens2022_2023['Starts']>=12]
Lens2022_2023_df

#Seko Fofana - támadás építés
Fofana=L1[L1["Player"]=="Seko Fofana"]
Fofana=Fofana[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Fofana["Cmp"])
PrgDist = np.array(Fofana["PrgDist"])

plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Seko Fofana meghatározó támadás építési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Seko Fofana
Fofana=L1[L1["Player"]=="Seko Fofana"]
Fofana=Fofana[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Fofana["TklW"])
Int = np.array(Fofana["Int"])
Err= np.array(Fofana["Err"])
Ast = np.array(Fofana["Ast"])
Gls = np.array(Fofana["Gls"])


plt.figure(figsize=(10, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Seko Fofana egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Salis Abdul Samed - támadás építés
Salis=L1[L1["Player"]=="Salis Abdul Samed"]
Salis.loc[len(Salis)] = {'Gls': 0, 'Ast':0,'Season': "2020-2021","TklW":0,"Err":0,"Cmp":0,"PrgDist":0,"Int":0}
Salis=Salis[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Salis["Cmp"])
PrgDist = np.array(Salis["PrgDist"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Salis Abdul Samed meghatározó támadás építési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Salis Abdul Samed - Egyéb statisztikák
Salis=L1[L1["Player"]=="Salis Abdul Samed"]
Salis.loc[len(Salis)] = {'Gls': 0, 'Ast':0,'Season': "2020-2021","TklW":0,"Err":0,"Cmp":0,"PrgDist":0,"Int":0}
Salis=Salis[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Salis["TklW"])
Int = np.array(Salis["Int"])
Err= np.array(Salis["Err"])
Ast = np.array(Salis["Ast"])
Gls = np.array(Salis["Gls"])


plt.figure(figsize=(10, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Salis Abdul Samed egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A Lens 2 ilyen stabilan jó teljesítményt hozó középpályással rendelkezett így volt egy szolid tengelye a csapatnak ami elengedhetetlen a sikerhez.

######Védők
"""

Lens2022_2023=L12023[L12023["Team"]=="Lens"]
Lens2022_2023_df=Lens2022_2023[Lens2022_2023['Pos']=="DF"]
Lens2022_2023_df=Lens2022_2023_df[Lens2022_2023['Starts']>=12]
Lens2022_2023_df

#Kevin Danso
Danso=L1[L1['Player']=="Kevin Danso"]
Danso.loc[len(Danso)] = {'Clr': 0, 'TklW':0, "Int":0, "Challenges_Tkl":0, "Won":0, "Lost":0, "Err":0,'Season': "2020-2021"}
Danso=Danso[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Danso["Clr"])
TklW = np.array(Danso["TklW"])
Int = np.array(Danso["Int"])
Challenges_Tkl=np.array(Danso["Challenges_Tkl"])
Won = np.array(Danso["Won"])
Lost = np.array(Danso["Lost"])
Err= np.array(Danso["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Kevin Danso meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Jonathan Gradit

L12021=L1[L1['Season']=='2020-2021']
L12022=L1[L1['Season']=='2021-2022']
L12023=L1[L1['Season']=='2022-2023']
L1Gradit=pd.concat([L12023,L12022,L12021], ignore_index=True)
Gradit=L1Gradit[L1Gradit['Player']=="Jonathan Gradit"]
Gradit=Gradit[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

plt.figure(figsize=(10, 6))


Clr = np.array(Gradit["Clr"])
TklW = np.array(Gradit["TklW"])
Int = np.array(Gradit["Int"])
Challenges_Tkl=np.array(Gradit["Challenges_Tkl"])
Won = np.array(Gradit["Won"])
Lost = np.array(Gradit["Lost"])
Err= np.array(Gradit["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')

plt.title('Jonathan Gradit meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Facundo Medina

Medina=L1[L1['Player']=="Facundo Medina"]
Medina=Medina[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

plt.figure(figsize=(10, 6))


Clr = np.array(Medina["Clr"])
TklW = np.array(Medina["TklW"])
Int = np.array(Medina["Int"])
Challenges_Tkl=np.array(Medina["Challenges_Tkl"])
Won = np.array(Medina["Won"])
Lost = np.array(Medina["Lost"])
Err= np.array(Medina["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')

plt.title('Facundo Medina meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""######Kapus(ok)"""

Lens2022_2023=L12023[L12023["Team"]=="Lens"]
Lens2022_2023_gk=Lens2022_2023[Lens2022_2023['Pos']=="GK"]
Lens2022_2023_gk

#Kapusok
Leca2021=L12021[L12021["Player"]=="Jean-Louis Leca"]
Leca2022=L12022[L12022["Player"]=="Jean-Louis Leca"]
Samba=L12023[L12023["Player"]=="Brice Samba"]
Kapusok=pd.concat([Samba,Leca2022,Leca2021])
Kapusok=Kapusok[["Player","GA","Saves","Save%","PK_Save%","CS","Season","MP"]].sort_values(by='Season', ascending=True)

GA = np.array(Kapusok["GA"])
Save = np.array(Kapusok["Save%"])
PK_Save = np.array(Kapusok["PK_Save%"])
CS=np.array(Kapusok["CS"])
Saves = np.array(Kapusok["Saves"])

plt.figure(figsize=(10, 6))
plt.plot(xpoints, Saves, label='Védések', marker='s')
plt.plot(xpoints, GA, label='Kapott gólok', marker='o')
plt.plot(xpoints, Save, label='Védési hatékonyság', marker='s')
plt.plot(xpoints, PK_Save, label='Büntető védési hatékonyság', marker='s')
plt.plot(xpoints, CS, label='Kapott gól nélküli meccsek', marker='s')


plt.title('Brice Samba meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""**ÖSSZEGZÉS**
Összességében elmondható, hogy a Lens a 2022-2023-as szezonban nyújtott kimagasló teljesítményét főként középpályásainak, védőinek és kapusának kiváló teljesítménye eredményezte, jól látható ugyanis hogy a legtöbb, fontos védelmi mutatóban nagyot javult a csapat.

##Bundesliga

###.csv file beolvasása és utótisztítása
"""

BL=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/BL_vegleges.csv")

del BL["Unnamed: 0"]

pd.isnull(BL).sum()

BL=BL.fillna(0)

pd.isnull(BL).sum()

#A későbbi kimutatások végett bevezettem 2 új változót
BL["Player(Team)"]=BL["Player"]+ "(" + BL["Team"] + ")"
BL["Season(Player)"]=BL["Season"]+ "(" + BL["Player"] + ")"

BL.head()

BL.columns

"""###2022-2023
####A 2022-2023-as szezon statisztikái, azok elemzése.

####A dataframe statisztikáinak elemzése, összehasonlítások, rangsorolások
"""

BL2023=BL[BL["Season"]=="2022-2023"]
BL2023

#Értékesített és kihagyott büntetők aránya
BL_Pen_Attempted_2023=BL2023["PKatt"].sum()
BL_Pen_Scored_2023=BL2023["Penalty_Kicks_Made"].sum()
BL_Pen_Missed_2023=BL_Pen_Attempted_2023-BL_Pen_Scored_2023

plt.figure(figsize=(13,6))
plt.title("Értékesített és kihagyott büntetők aránya (2023)")
data=[BL_Pen_Scored_2023,BL_Pen_Missed_2023]
colors=["green","red"]
labels=["Belőtt büntetők","Kihagyott büntetők"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Top 10 legtöbb játékost adó nemzet (2023)
jatekosok_szama = BL2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")

# Oszlopdiagram létrehozáBL
plt.figure(figsize=(10, 6))
plt.bar(top_10_nemzet['Nation'], top_10_nemzet['Játékosok száma'], color='skyblue')
plt.xlabel('Nemzet')
plt.ylabel('Játékosok száma')
plt.title('Nemzetek szerinti játékosok száma')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Az előző kimutatás csak kördiagrammal
jatekosok_szama = BL2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")
plt.figure(figsize=(8, 8))
plt.pie(top_10_nemzet['Játékosok száma'], labels=top_10_nemzet['Nation'], autopct='%1.1f%%')
plt.title('Top 10 nemzet játékosainak aránya')
plt.axis('equal')
plt.tight_layout()
plt.show()

#Top 10 gólpassz adó
top_10_gólpassz_adó_2023_BL = BL2023.groupby('Player')["Ast"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_gólpassz_adó_2023_BL['Player'], top_10_gólpassz_adó_2023_BL['Ast'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Legjobb gólpassz adók csapatonként
legjobb_golpassz_adok_csapatonként = BL2023.groupby('Team').apply(lambda x: x.nlargest(1, 'Ast')).reset_index(drop=True)
legjobb_golpassz_adok_csapatonként=legjobb_golpassz_adok_csapatonként.sort_values(by="Ast",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(legjobb_golpassz_adok_csapatonként['Player(Team)'], legjobb_golpassz_adok_csapatonként['Ast'])
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=65)
plt.tight_layout()
plt.show()

#Top 10 gólpasssz adó és hogy hány gólpasszuknak kellett volna lennie (xA)
gp_xA_2023_BL = BL2023.groupby('Player').agg({"Ast":'sum','xA':'sum'}).nlargest(10,'Ast').reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(20, 8))
bar_width = 0.4
index = range(len(gp_xA_2023_BL))
plt.bar(index, gp_xA_2023_BL['Ast'], bar_width, color='skyblue', label='Gólpasszok')
plt.bar([i + bar_width for i in index], gp_xA_2023_BL['xA'], bar_width, color='orange', label='xA mutató')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Játékos gólpasszok és xA mutatója')
plt.xticks([i + bar_width/2 for i in index], gp_xA_2023_BL['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb gólban szerepet vállaló játékos
top10_ga_BL2023=BL2023.nlargest(10,"G+A")
top10_ga_BL2023=top10_ga_BL2023.sort_values(by="G+A",ascending=False)

plt.figure(figsize=(20, 8))
plt.bar(top10_ga_BL2023["Player"], top10_ga_BL2023['Gls'], color='skyblue', label='Gól')
plt.bar(top10_ga_BL2023["Player"], top10_ga_BL2023['Ast'], bottom=top10_ga_BL2023['Gls'], color='orange', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb gólban szerepet vállaló játékos')
plt.xticks([i + bar_width/2 for i in index], top10_ga_BL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 góllövő és hogy ők hány gólt kellett vna szerezniük (xG).
top10_scorer_BL2023=BL2023.nlargest(10,"Gls")
top10_scorer_BL2023=top10_ga_BL2023.sort_values(by="Gls",ascending=False)

plt.figure(figsize=(20, 8))
bar_width = 0.4
index = range(len(top10_scorer_BL2023))
plt.bar(index, top10_scorer_BL2023['Gls'], bar_width, color='skyblue', label='Kaput találó lövések száma')
plt.bar([i + bar_width for i in index], top10_scorer_BL2023['xG'], bar_width, color='orange', label='xG')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('#Top 10 góllövő és hogy ők hány lövésből szereztek annyi gólt amennyit (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_scorer_BL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Pozíciónkénti gólok száma
gls_per_pos_BL2023=BL2023.groupby('Pos')['Gls'].sum().reset_index()
gls_per_pos_BL2023=gls_per_pos_BL2023.sort_values(by="Gls",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(gls_per_pos_BL2023['Pos'], gls_per_pos_BL2023['Gls'])
plt.xlabel('Pozíció')
plt.ylabel('Gólok száma')
plt.title('Pozíciónkénti gólok száma (2022-23)')

plt.tight_layout()
plt.show()

#Sárga és piros lapok megoszlása
yellow_BL2023=BL2023["CrdY"].sum()
red_BL2023=BL2023["CrdR"].sum()
plt.figure(figsize=(13,6))
plt.title("Sárga és piros lapok megoszlása (2023)")
data=[yellow_BL2023,red_BL2023]
colors=["yellow","red"]
labels=["Sárga lapok","Piros lapok"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Legtöbb büntetőlappal rendelkező játékosok
BL2023["cardssum"]=BL2023['CrdY']+BL2023['CrdR']
top10_carded_BL2023=BL2023.nlargest(10,"cardssum")
top10_carded_BL2023=top10_carded_BL2023.sort_values(by="cardssum",ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(top10_carded_BL2023["Player(Team)"], top10_carded_BL2023['CrdY'], color='yellow', label='Sárga lap')
plt.bar(top10_carded_BL2023["Player(Team)"], top10_carded_BL2023['CrdR'], bottom=top10_carded_BL2023['CrdY'], color='red', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('Lapok száma')
plt.title('#Top 10 legtöbb büntetőlappal rendelkező játékosok (2022-2023)')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

#Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_BL2023=BL2023[BL2023["Pos"]=="GK"]
KeepertoCompare_BL2023=Keepers_BL2023[Keepers_BL2023["MP"]>=10]
top10_savepercent_BL2023=KeepertoCompare_BL2023.nlargest(10,"Save%")
top10_savepercent_BL2023=top10_savepercent_BL2023.sort_values(by="Save%",ascending=False)

plt.figure(figsize=(12, 6))
bar_width = 0.4
index = range(len(top10_savepercent_BL2023))
plt.bar(index, top10_savepercent_BL2023['SoTA'], bar_width, color='skyblue', label='Kapott lövések')
plt.bar([i + bar_width for i in index], top10_savepercent_BL2023['GA'], bar_width, color='orange', label='Kapott gólok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_savepercent_BL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_BL2023=BL2023[BL2023["Pos"]=="GK"]
KeepertoCompare_BL2023=Keepers_BL2023[Keepers_BL2023["MP"]>=10]
top10_cs_BL2023=KeepertoCompare_BL2023.nlargest(10,"CS%")
top10_cs_BL2023=top10_cs_BL2023.sort_values(by="MP",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_cs_BL2023))
plt.bar(index, top10_cs_BL2023['MP'], bar_width, color='skyblue', label='Lejátszott meccsek száma')
plt.bar([i + bar_width for i in index], top10_cs_BL2023['CS'], bar_width, color='orange', label='Kapott gól nélküli meccsek száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_cs_BL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobb passzpontossággal rendelkező játékos
gp_pp_BL2023 = BL2023.groupby('Player').agg({"Ast":'sum','Att':'sum','Cmp':'sum','Cmp%':'sum'}).nlargest(10,'Ast').reset_index()
top10_pp_BL2023=gp_pp_BL2023.sort_values(by="Cmp%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_pp_BL2023))
plt.bar(index, top10_pp_BL2023['Att'], bar_width, color='skyblue', label='Passzok száma')
plt.bar([i + bar_width for i in index], top10_pp_BL2023['Cmp'], bar_width, color='orange', label='Pontos passzok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_pp_BL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobban szerelő játékos
BL2023["Tkl_Tkl%"]=BL2023['TklW']/BL2023['Tkl']*100
top10_tkl_BL2023 = BL2023.groupby('Player').agg({"Tkl":'sum','TklW':'sum','Tkl_Tkl%':'sum'}).nlargest(10,'TklW').reset_index()
top10_tkl_BL2023 = top10_tkl_BL2023.sort_values(by="Tkl_Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_tkl_BL2023))
plt.bar(index, top10_tkl_BL2023['Tkl'], bar_width, color='skyblue', label='Szerelési kísérletek száma')
plt.bar([i + bar_width for i in index], top10_tkl_BL2023['TklW'], bar_width, color='orange', label='Sikeres szerelések száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobban szerelő játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_tkl_BL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb párharcot nyerő játékos
top10_chl_BL2023 = BL2023.groupby('Player').agg({"Challenges_Tkl":'sum','Lost':'sum','Tkl%':'sum'}).nlargest(10,'Challenges_Tkl').reset_index()
top10_chl_BL2023 = top10_chl_BL2023.sort_values(by="Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_chl_BL2023["Player"], top10_chl_BL2023['Challenges_Tkl'], color='lightgreen', label='Győztes párharcok')
plt.bar(top10_chl_BL2023["Player"], top10_chl_BL2023['Lost'], bottom=top10_chl_BL2023['Challenges_Tkl'], color='red', label='Vesztes párharcok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb párharcot nyerő játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_chl_BL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#'Top 10 legtöbb szereléssel és labdaszerzéssel rendelkező játékos
top10_TklInt_BL2023 = BL2023.groupby('Player(Team)').agg({"Tkl":'sum','Int':'sum','Tkl+Int':'sum'}).nlargest(10,'Tkl+Int').reset_index()
top10_TklInt_BL2023 = top10_TklInt_BL2023.sort_values(by="Tkl+Int",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_TklInt_BL2023["Player(Team)"], top10_TklInt_BL2023['Tkl'], color='skyblue', label='Tackle')
plt.bar(top10_TklInt_BL2023["Player(Team)"], top10_TklInt_BL2023['Int'], bottom=top10_TklInt_BL2023['Tkl'], color='brown', label='Interception')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb szereléssel és labdaszerzéssel rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_TklInt_BL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Felszabadítások illetve lövéshez vezető hibák összehasonlítása
top10_clrerr_BL2023 = BL2023.groupby('Player(Team)').agg({"Clr":'sum','Err':'sum'}).nlargest(10,'Clr').reset_index()
top10_clrerr_BL2023 = top10_clrerr_BL2023.sort_values(by="Clr",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_clrerr_BL2023))
plt.bar(index, top10_clrerr_BL2023['Clr'], bar_width, color='skyblue', label='Felszabadítások száma')
plt.bar([i + bar_width for i in index], top10_clrerr_BL2023['Err'], bar_width, color='orange', label='Lövéshez vezető hibák száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_clrerr_BL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Legtöbb lövéshez vezető hibát vétő játékosok
top_10_error_maker_BL2023 = BL2023.groupby('Player(Team)')["Err"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_error_maker_BL2023['Player(Team)'], top_10_error_maker_BL2023['Err'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Lövéshez vezető hibák száma')
plt.title('Top 10 legtöbb adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Top 10 legtöbb fejpárbajt nyerő játékos

top10_airduel_BL2023 = BL2023.groupby('Player(Team)').agg({"Won":'sum','Lost':'sum'}).nlargest(10,'Won').reset_index()
top10_airduel_BL2023 = top10_airduel_BL2023.sort_values(by="Won",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_airduel_BL2023))
plt.bar(index, top10_airduel_BL2023['Won'], bar_width, color='skyblue', label='Megnyert fejpárbajok')
plt.bar([i + bar_width for i in index], top10_airduel_BL2023['Lost'], bar_width, color='orange', label='Elveszett fejpárbajok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_airduel_BL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

"""####Összefüggések keresése
Bizonyos játékosok statisztikái feltűnően gyengébbek az elvártnál, ezért meg szeretném vizsgálni, hogy ezen játékosok mélyrepülése hogyan hatott a csapatuk teljesítményére. Ehhez szükségem volt a bajnoki tabellára
"""

BL_table=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/Bundesliga_tables.csv")

BL_table

del BL_table["Unnamed: 0"]

BL_table

"""#####Bundesliga tabella 2022-2023"""

BL_table_2023=BL_table[BL_table["Season"]=="2022-2023"]
BL_table_2023

"""#####AZ Union Berlin nagy szezonja"""

Union=BL_table[BL_table["Squad"]=="Union Berlin"]
Union=Union[["Rk","Season"]].sort_values(by='Season', ascending=True)

xpoints = np.array(Union["Season"])
ypoints = np.array(Union["Rk"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Union["Rk"], label='Helyezés', marker='s')

plt.title('Az Union Berlin elmúlt 5 évben elért bajnoki helyezései', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Helyezés', fontsize=12)
plt.legend()
plt.show()

"""Mint az látható nagy meglepetésre az Union Berlin a 4-ik, Bajnokok Ligája indulást jelentő helyen végzett a 2022-2023-as kiírásban ami a vonaldiagramot tekintve egy 4 éves folyamat koronázott meg. Megvizsgáltam hát a meghatározó játékosainak teljesítményét."""

Union=BL_table[BL_table["Squad"]=="Union Berlin"]
Union_gf_ga=Union[["Season","GF","GA"]].sort_values(by='Season', ascending=True)

gf = np.array(Union_gf_ga["GF"])
ga = np.array(Union_gf_ga["GA"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gf, label='Szerzett gólok', marker='o')
plt.plot(xpoints, ga, label='Kapott gólok', marker='s')

plt.title('Az Union Berlin lőtt és kapott góljai az elmúlt 5 szezonban', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Lőtt és kapott gólok', fontsize=12)
plt.legend()
plt.show()

"""Az ábrából kitűnik, hogy a korábbi évekhez képest nagyjából ugyanannyi gólt rúgtak viszont kevesebb gólt kaptak. Így itt inkább a középpályások, védők és a kapusok teljesítményét elemeztem.

######Középpályások
"""

Union2023=BL2023[BL2023["Team"]=="Union Berlin"]
Union2023_mf=Union2023[Union2023['Pos']=="MF"]
Union2023_mf

#Rani Khedira - támadás építés

BL2020=BL[BL["Season"]=="2019-2020"]
BL2021=BL[BL["Season"]=="2020-2021"]
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Khedira=pd.concat([BL2023,BL2022,BL2021,BL2020], ignore_index=True)
Khedira=Khedira[Khedira["Player"]=="Rani Khedira"]
Khedira=Khedira[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Khedira["Cmp"])
PrgDist = np.array(Khedira["PrgDist"])

plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Rani Khedira meghatározó támadás építési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Rani Khedira - Egyéb statisztikák
BL2020=BL[BL["Season"]=="2019-2020"]
BL2021=BL[BL["Season"]=="2020-2021"]
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Khedira=pd.concat([BL2023,BL2022,BL2021,BL2020], ignore_index=True)
Khedira=Khedira[Khedira["Player"]=="Rani Khedira"]
Khedira=Khedira[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Khedira["TklW"])
Int = np.array(Khedira["Int"])
Err= np.array(Khedira["Err"])
Ast = np.array(Khedira["Ast"])
Gls = np.array(Khedira["Gls"])


plt.figure(figsize=(10, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Rani Khedira egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Janik Haberer - támadás építés
BL2020=BL[BL["Season"]=="2019-2020"]
BL2021=BL[BL["Season"]=="2020-2021"]
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Haberer=pd.concat([BL2023,BL2022,BL2021,BL2020], ignore_index=True)
Haberer=Haberer[Haberer["Player"]=="Janik Haberer"]
Haberer=Haberer[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Haberer["Cmp"])
PrgDist = np.array(Haberer["PrgDist"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Janik Haberer Samed meghatározó támadás építési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Janik Haberer - Egyéb statisztikák
BL2020=BL[BL["Season"]=="2019-2020"]
BL2021=BL[BL["Season"]=="2020-2021"]
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Haberer=pd.concat([BL2023,BL2022,BL2021,BL2020], ignore_index=True)
Haberer=Haberer[Haberer["Player"]=="Janik Haberer"]
Haberer=Haberer[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Haberer["TklW"])
Int = np.array(Haberer["Int"])
Err= np.array(Haberer["Err"])
Ast = np.array(Haberer["Ast"])
Gls = np.array(Haberer["Gls"])


plt.figure(figsize=(10, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Janik Haberer egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#András Schäfer - támadás építés
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Schäfer=pd.concat([BL2023,BL2022], ignore_index=True)
Schäfer=Schäfer[Schäfer["Player"]=="András Schäfer"]
Schäfer.loc[len(Schäfer)] = {'Gls': 0, 'Ast':0,'Season': "2020-2021","TklW":0,"Err":0,"Cmp":0,"PrgDist":0,"Int":0}
Schäfer.loc[len(Schäfer)] = {'Gls': 0, 'Ast':0,'Season': "2019-2020","TklW":0,"Err":0,"Cmp":0,"PrgDist":0,"Int":0}

Schäfer=Schäfer[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Schäfer["Cmp"])
PrgDist = np.array(Schäfer["PrgDist"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Schäfer András meghatározó támadás építési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#András Schäfer - Egyéb statisztikák
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Schäfer=pd.concat([BL2023,BL2022], ignore_index=True)
Schäfer=Schäfer[Schäfer["Player"]=="András Schäfer"]
Schäfer.loc[len(Schäfer)] = {'Gls': 0, 'Ast':0,'Season': "2020-2021","TklW":0,"Err":0,"Cmp":0,"PrgDist":0,"Int":0}
Schäfer.loc[len(Schäfer)] = {'Gls': 0, 'Ast':0,'Season': "2019-2020","TklW":0,"Err":0,"Cmp":0,"PrgDist":0,"Int":0}

Schäfer=Schäfer[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Schäfer["TklW"])
Int = np.array(Schäfer["Int"])
Err= np.array(Schäfer["Err"])
Ast = np.array(Schäfer["Ast"])
Gls = np.array(Schäfer["Gls"])


plt.figure(figsize=(10, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Janik Haberer egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

Schäfer

"""Az Union középpályási hatalmas fejlődést produkáltak a szezonok során így kialakult egy erős tengely a csapat középpályáján.

######Védők
"""

Union2023=BL2023[BL2023["Team"]=="Union Berlin"]
Union2023_df=Union2023[Union2023['Pos']=="DF"]
#Union2023_df=Union2023_df[Union2023['Starts']>=12]
Union2023_df

#Robin Knoche
BL2020=BL[BL["Season"]=="2019-2020"]
BL2021=BL[BL["Season"]=="2020-2021"]
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Knoche=pd.concat([BL2023,BL2022,BL2021,BL2020], ignore_index=True)
Knoche=Knoche[Knoche["Player"]=="Robin Knoche"]
Knoche=Knoche[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Knoche["Clr"])
TklW = np.array(Knoche["TklW"])
Int = np.array(Knoche["Int"])
Challenges_Tkl=np.array(Knoche["Challenges_Tkl"])
Won = np.array(Knoche["Won"])
Lost = np.array(Knoche["Lost"])
Err= np.array(Knoche["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Robin Knoche meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Christopher Trimmel

Trimmel=BL[BL["Player"]=="Christopher Trimmel"]
Trimmel=Trimmel[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Knoche["Clr"])
TklW = np.array(Knoche["TklW"])
Int = np.array(Knoche["Int"])
Challenges_Tkl=np.array(Knoche["Challenges_Tkl"])
Won = np.array(Knoche["Won"])
Lost = np.array(Knoche["Lost"])
Err= np.array(Knoche["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Christopher Trimmel meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Niko Gießelmann
BL2020=BL[BL["Season"]=="2019-2020"]
BL2021=BL[BL["Season"]=="2020-2021"]
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Gießelmann=pd.concat([BL2023,BL2022,BL2021,BL2020], ignore_index=True)
Gießelmann=Gießelmann[Gießelmann["Player"]=="Niko Gießelmann"]
Gießelmann=Gießelmann[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Gießelmann["Clr"])
TklW = np.array(Gießelmann["TklW"])
Int = np.array(Gießelmann["Int"])
Challenges_Tkl=np.array(Gießelmann["Challenges_Tkl"])
Won = np.array(Gießelmann["Won"])
Lost = np.array(Gießelmann["Lost"])
Err= np.array(Gießelmann["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Niko Gießelmann meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A védők tekintetében olyanokat vizsgáltam akik több szezont is lejátszottak a bajnokságban, és többüknél is nagy formjavulás figyelhető meg, ezen felül az új igazolások, Diogo Leite és Danilo Doekhi is jó teljesítménnyel rukkoltak elő, így a védelmét egyértelműen jól erősítették meg a csapatnak.

######Kapus(ok)
"""

Union2023=BL2023[BL2023["Team"]=="Union Berlin"]
Union2023_gk=Union2023[Union2023['Pos']=="GK"]
Union2023_gk=Union2023_gk[Union2023['Starts']>=12]
Union2023_gk

#Frederik Rønnow
BL2020=BL[BL["Season"]=="2019-2020"]
BL2021=BL[BL["Season"]=="2020-2021"]
Ronnow2021=BL[BL["Team"]=="Schalke 04"]
Ronnow2021=Ronnow2021[Ronnow2021["Player"]=="Frederik Rønnow"]
BL2022=BL[BL["Season"]=="2021-2022"]
BL2023=BL[BL["Season"]=="2022-2023"]
Rønnow=pd.concat([BL2023,BL2022,Ronnow2021,BL2020], ignore_index=True)
Rønnow=Rønnow[Rønnow["Player"]=="Frederik Rønnow"]
Rønnow=Rønnow[["Player","GA","Saves","Save%","PK_Save%","CS","Season","MP","Season(Player)"]].sort_values(by='Season(Player)', ascending=True)

GA = np.array(Rønnow["GA"])
Save = np.array(Rønnow["Save%"])
PK_Save = np.array(Rønnow["PK_Save%"])
CS=np.array(Rønnow["CS"])
Saves = np.array(Rønnow["Saves"])

plt.figure(figsize=(10, 6))
plt.plot(Rønnow["Season(Player)"], Saves, label='Védések', marker='s')
plt.plot(Rønnow["Season(Player)"], GA, label='Kapott gólok', marker='o')
plt.plot(Rønnow["Season(Player)"], Save, label='Védési hatékonyság', marker='s')
plt.plot(Rønnow["Season(Player)"], PK_Save, label='Büntető védési hatékonyság', marker='s')
plt.plot(Rønnow["Season(Player)"], CS, label='Kapott gól nélküli meccsek', marker='s')


plt.title('Frederik Rønnow meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A 2020-2021-es szezonban Ronnow kapus 2 csapatban is szerepelt, de az egyikben nem játszott így a másikat, a Schalke 04 csapatát vettem figyelembe. Egyébként az ő teljesítményén is jelentő javulást lehet felfedezni

######**ÖSSZEGZÉS**
Összességében elmondható, hogy az Union Berlin a 2022-2023-as szezonban nyújtott kimagasló teljesítményét főként középpályásainak, védőinek és kapusának kiváló teljesítménye eredményezte, jól látható ugyanis hogy a legtöbb, fontos védelmi mutatóban nagyot javult a csapat.

##LaLiga

###.csv file beolvasása és utótisztítása
"""

LL=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/LaLiga_vegleges.csv")

del LL["Unnamed: 0"]

pd.isnull(LL).sum()

LL[pd.isnull(LL["Nation"])][["Player","Nation"]]

LL=LL[LL["Player"]!="Marcos Fernández Cózar"]
LL=LL[LL["Player"]!="Blanco"]
LL=LL[LL["Player"]!="Santiago García"]
LL=LL[LL["Player"]!="Hugo Guillamón"]
LL=LL[LL["Player"]!="Mamadou N'Diaye"]
LL=LL[LL["Player"]!="Oscar Medina"]
LL=LL[LL["Player"]!="Ricardo Visus"]

pd.isnull(LL).sum()

LL[pd.isnull(LL["Pos"])][["Player","Pos"]]

LL=LL[LL["Player"]!="Iván Sanz"]

LL[pd.isnull(LL["Age"])][["Player","Age"]]

LL=LL[LL["Player"]!="Javito Lopez"]

LL=LL.fillna(0)

pd.isnull(LL).sum()

#A későbbi kimutatások miatt hozzáadtam 2 új oszlopot
LL["Player(Team)"]=LL["Player"]+ "(" + LL["Team"] + ")"
LL["Season(Player)"]=LL["Season"]+ "(" + LL["Player"] + ")"

LL.head()

LL.columns

"""###2022-2023
####A 2022-2023-as szezon statisztikái, azok elemzése.

####A dataframe statisztikáinak elemzése, összehasonlítások, rangsorolások
"""

LL2023=LL[LL["Season"]=="2022-2023"]
LL2023

#Értékesített és kihagyott büntetők aránya
LL_Pen_Attempted_2023=LL2023["PKatt"].sum()
LL_Pen_Scored_2023=LL2023["Penalty_Kicks_Made"].sum()
LL_Pen_Missed_2023=LL_Pen_Attempted_2023-LL_Pen_Scored_2023

plt.figure(figsize=(13,6))
plt.title("Értékesített és kihagyott büntetők aránya (2023)")
data=[LL_Pen_Scored_2023,LL_Pen_Missed_2023]
colors=["green","red"]
labels=["Belőtt büntetők","Kihagyott büntetők"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Top 10 legtöbb játékost adó nemzet (2023)
jatekosok_szama = LL2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")

# Oszlopdiagram létrehozáLL
plt.figure(figsize=(10, 6))
plt.bar(top_10_nemzet['Nation'], top_10_nemzet['Játékosok száma'], color='skyblue')
plt.xlabel('Nemzet')
plt.ylabel('Játékosok száma')
plt.title('Nemzetek szerinti játékosok száma')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Az előző kimutatás csak kördiagrammal
jatekosok_szama = LL2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")
plt.figure(figsize=(8, 8))
plt.pie(top_10_nemzet['Játékosok száma'], labels=top_10_nemzet['Nation'], autopct='%1.1f%%')
plt.title('Top 10 nemzet játékosainak aránya')
plt.axis('equal')
plt.tight_layout()
plt.show()

#Top 10 gólpassz adó
top_10_gólpassz_adó_2023_LL = LL2023.groupby('Player')["Ast"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_gólpassz_adó_2023_LL['Player'], top_10_gólpassz_adó_2023_LL['Ast'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Legjobb gólpassz adók csapatonként
legjobb_golpassz_adok_csapatonként = LL2023.groupby('Team').apply(lambda x: x.nlargest(1, 'Ast')).reset_index(drop=True)
legjobb_golpassz_adok_csapatonként=legjobb_golpassz_adok_csapatonként.sort_values(by="Ast",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(legjobb_golpassz_adok_csapatonként['Player(Team)'], legjobb_golpassz_adok_csapatonként['Ast'])
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=65)
plt.tight_layout()
plt.show()

#Top 10 gólpasssz adó és hogy hány gólpasszuknak kellett volna lennie (xA)
gp_xA_2023_LL = LL2023.groupby('Player').agg({"Ast":'sum','xA':'sum'}).nlargest(10,'Ast').reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(20, 8))
bar_width = 0.4
index = range(len(gp_xA_2023_LL))
plt.bar(index, gp_xA_2023_LL['Ast'], bar_width, color='skyblue', label='Gólpasszok')
plt.bar([i + bar_width for i in index], gp_xA_2023_LL['xA'], bar_width, color='orange', label='xA mutató')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Játékos gólpasszok és xA mutatója')
plt.xticks([i + bar_width/2 for i in index], gp_xA_2023_LL['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb gólban szerepet vállaló játékos
top10_ga_LL2023=LL2023.nlargest(10,"G+A")
top10_ga_LL2023=top10_ga_LL2023.sort_values(by="G+A",ascending=False)

plt.figure(figsize=(20, 8))
plt.bar(top10_ga_LL2023["Player"], top10_ga_LL2023['Gls'], color='skyblue', label='Gól')
plt.bar(top10_ga_LL2023["Player"], top10_ga_LL2023['Ast'], bottom=top10_ga_LL2023['Gls'], color='orange', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb gólban szerepet vállaló játékos')
plt.xticks([i + bar_width/2 for i in index], top10_ga_LL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 góllövő és hogy ők hány gólt kellett vna szerezniük (xG).
top10_scorer_LL2023=LL2023.nlargest(10,"Gls")
top10_scorer_LL2023=top10_ga_LL2023.sort_values(by="Gls",ascending=False)

plt.figure(figsize=(20, 8))
bar_width = 0.4
index = range(len(top10_scorer_LL2023))
plt.bar(index, top10_scorer_LL2023['Gls'], bar_width, color='skyblue', label='Kaput találó lövések száma')
plt.bar([i + bar_width for i in index], top10_scorer_LL2023['xG'], bar_width, color='orange', label='xG')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('#Top 10 góllövő és hogy ők hány lövésből szereztek annyi gólt amennyit (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_scorer_LL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Pozíciónkénti gólok száma
gls_per_pos_LL2023=LL2023.groupby('Pos')['Gls'].sum().reset_index()
gls_per_pos_LL2023=gls_per_pos_LL2023.sort_values(by="Gls",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(gls_per_pos_LL2023['Pos'], gls_per_pos_LL2023['Gls'])
plt.xlabel('Pozíció')
plt.ylabel('Gólok száma')
plt.title('Pozíciónkénti gólok száma (2022-23)')

plt.tight_layout()
plt.show()

#Sárga és piros lapok megoszlása
yellow_LL2023=LL2023["CrdY"].sum()
red_LL2023=LL2023["CrdR"].sum()
plt.figure(figsize=(13,6))
plt.title("Sárga és piros lapok megoszlása (2023)")
data=[yellow_LL2023,red_LL2023]
colors=["yellow","red"]
labels=["Sárga lapok","Piros lapok"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Legtöbb büntetőlappal rendelkező játékosok
LL2023["cardssum"]=LL2023['CrdY']+LL2023['CrdR']
top10_carded_LL2023=LL2023.nlargest(10,"cardssum")
top10_carded_LL2023=top10_carded_LL2023.sort_values(by="cardssum",ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(top10_carded_LL2023["Player(Team)"], top10_carded_LL2023['CrdY'], color='yellow', label='Sárga lap')
plt.bar(top10_carded_LL2023["Player(Team)"], top10_carded_LL2023['CrdR'], bottom=top10_carded_LL2023['CrdY'], color='red', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('Lapok száma')
plt.title('#Top 10 legtöbb büntetőlappal rendelkező játékosok (2022-2023)')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

#Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_LL2023=LL2023[LL2023["Pos"]=="GK"]
KeepertoCompare_LL2023=Keepers_LL2023[Keepers_LL2023["MP"]>=10]
top10_savepercent_LL2023=KeepertoCompare_LL2023.nlargest(10,"Save%")
top10_savepercent_LL2023=top10_savepercent_LL2023.sort_values(by="Save%",ascending=False)

plt.figure(figsize=(12, 6))
bar_width = 0.4
index = range(len(top10_savepercent_LL2023))
plt.bar(index, top10_savepercent_LL2023['SoTA'], bar_width, color='skyblue', label='Kapott lövések')
plt.bar([i + bar_width for i in index], top10_savepercent_LL2023['GA'], bar_width, color='orange', label='Kapott gólok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_savepercent_LL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_LL2023=LL2023[LL2023["Pos"]=="GK"]
KeepertoCompare_LL2023=Keepers_LL2023[Keepers_LL2023["MP"]>=10]
top10_cs_LL2023=KeepertoCompare_LL2023.nlargest(10,"CS%")
top10_cs_LL2023=top10_cs_LL2023.sort_values(by="MP",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_cs_LL2023))
plt.bar(index, top10_cs_LL2023['MP'], bar_width, color='skyblue', label='Lejátszott meccsek száma')
plt.bar([i + bar_width for i in index], top10_cs_LL2023['CS'], bar_width, color='orange', label='Kapott gól nélküli meccsek száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_cs_LL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobb passzpontossággal rendelkező játékos
gp_pp_LL2023 = LL2023.groupby('Player').agg({"Ast":'sum','Att':'sum','Cmp':'sum','Cmp%':'sum'}).nlargest(10,'Ast').reset_index()
top10_pp_LL2023=gp_pp_LL2023.sort_values(by="Cmp%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_pp_LL2023))
plt.bar(index, top10_pp_LL2023['Att'], bar_width, color='skyblue', label='Passzok száma')
plt.bar([i + bar_width for i in index], top10_pp_LL2023['Cmp'], bar_width, color='orange', label='Pontos passzok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_pp_LL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobban szerelő játékos
LL2023["Tkl_Tkl%"]=LL2023['TklW']/LL2023['Tkl']*100
top10_tkl_LL2023 = LL2023.groupby('Player').agg({"Tkl":'sum','TklW':'sum','Tkl_Tkl%':'sum'}).nlargest(10,'TklW').reset_index()
top10_tkl_LL2023 = top10_tkl_LL2023.sort_values(by="Tkl_Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_tkl_LL2023))
plt.bar(index, top10_tkl_LL2023['Tkl'], bar_width, color='skyblue', label='Szerelési kísérletek száma')
plt.bar([i + bar_width for i in index], top10_tkl_LL2023['TklW'], bar_width, color='orange', label='Sikeres szerelések száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_tkl_LL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb párharcot nyerő játékos
top10_chl_LL2023 = LL2023.groupby('Player').agg({"Challenges_Tkl":'sum','Lost':'sum','Tkl%':'sum'}).nlargest(10,'Challenges_Tkl').reset_index()
top10_chl_LL2023 = top10_chl_LL2023.sort_values(by="Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_chl_LL2023["Player"], top10_chl_LL2023['Challenges_Tkl'], color='lightgreen', label='Győztes párharcok')
plt.bar(top10_chl_LL2023["Player"], top10_chl_LL2023['Lost'], bottom=top10_chl_LL2023['Challenges_Tkl'], color='red', label='Vesztes párharcok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb párharcot nyerő játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_chl_LL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb párharcot nyerő játékos
top10_TklInt_LL2023 = LL2023.groupby('Player(Team)').agg({"Tkl":'sum','Int':'sum','Tkl+Int':'sum'}).nlargest(10,'Tkl+Int').reset_index()
top10_TklInt_LL2023 = top10_TklInt_LL2023.sort_values(by="Tkl+Int",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_TklInt_LL2023["Player(Team)"], top10_TklInt_LL2023['Tkl'], color='skyblue', label='Tackle')
plt.bar(top10_TklInt_LL2023["Player(Team)"], top10_TklInt_LL2023['Int'], bottom=top10_TklInt_LL2023['Tkl'], color='brown', label='Interception')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb szereléssel és labdaszerzéssel rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_TklInt_LL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Felszabadítások illetve lövéshez vezető hibák összehasonlítása


top10_clrerr_LL2023 = LL2023.groupby('Player(Team)').agg({"Clr":'sum','Err':'sum'}).nlargest(10,'Clr').reset_index()
top10_clrerr_LL2023 = top10_clrerr_LL2023.sort_values(by="Clr",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_clrerr_LL2023))
plt.bar(index, top10_clrerr_LL2023['Clr'], bar_width, color='skyblue', label='Felszabadítások száma')
plt.bar([i + bar_width for i in index], top10_clrerr_LL2023['Err'], bar_width, color='orange', label='Lövéshez vezető hibák száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_clrerr_LL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Legtöbb lövéshez vezető hiát vétő játékosok
top_10_error_maker_LL2023 = LL2023.groupby('Player(Team)')["Err"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_error_maker_LL2023['Player(Team)'], top_10_error_maker_LL2023['Err'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Lövéshez vezető hibák száma')
plt.title('Top 10 legtöbb adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Top 10 legtöbb fejpárbajt nyerő játékos

top10_airduel_LL2023 = LL2023.groupby('Player(Team)').agg({"Won":'sum','Lost':'sum'}).nlargest(10,'Won').reset_index()
top10_airduel_LL2023 = top10_airduel_LL2023.sort_values(by="Won",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_airduel_LL2023))
plt.bar(index, top10_airduel_LL2023['Won'], bar_width, color='skyblue', label='Megnyert fejpárbajok')
plt.bar([i + bar_width for i in index], top10_airduel_LL2023['Lost'], bar_width, color='orange', label='Elveszett fejpárbajok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_airduel_LL2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

"""####Összefüggések keresése
Bizonoys játékosok statisztikái feltűnően gyengébbek az elvártnál, ezért meg szeretném vizsgálni, hogy ezen játékosok mélyrepülése hogyan hatott a csapatuk teljesítményére. Ehhez szükségem volt a bajnoki tabellára
"""

LL_table=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/LaLiga_tables.csv")

LL_table

del LL_table["Unnamed: 0"]

LL_table

"""#####LaLiga tabella 2022-2023"""

LL_table_2023=LL_table[LL_table["Season"]=="2022-2023"]
LL_table_2023

"""#####A Sevilla mélyrepülése"""

Sevilla=LL_table[LL_table["Squad"]=="Sevilla"]
Sevilla=Sevilla[["Rk","Season"]].sort_values(by='Season', ascending=True)

xpoints = np.array(Sevilla["Season"])
ypoints = np.array(Sevilla["Rk"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Sevilla["Rk"], label='Helyezés', marker='s')

plt.title('A Sevilla elmúlt 5 évben elért bajnoki helyezései', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Helyezés', fontsize=12)
plt.legend()
plt.show()

"""Mint az látható nagy meglepetésre a Sevilla azok után, hogy éveken át ott volt a bajnokság elején, 3 szezonban 4-ik helyen végzett (tehát be jutott a Bajnokok Ligájába), a 2022-2023-as kiírásban csupán a 12-ik helyet kaparintotta meg az egyesület. Megvizsgáltam hát a meghatározó játékosainak teljesítményét."""

Sevilla=LL_table[LL_table["Squad"]=="Sevilla"]
Sevilla_gf_ga=Sevilla[["Season","GF","GA"]].sort_values(by='Season', ascending=True)

gf = np.array(Sevilla_gf_ga["GF"])
ga = np.array(Sevilla_gf_ga["GA"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gf, label='Szerzett gólok', marker='o')
plt.plot(xpoints, ga, label='Kapott gólok', marker='s')

plt.title('Sevilla lőtt és kapott góljai az elmúlt 5 szezonban', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Lőtt és kapott gólok', fontsize=12)


plt.legend()


plt.show()

"""Mint az látható, a 2022-2023-as szezonban majdnem 2-szer annyi gólt kaptak mint előtte a 2021-2022-es kiírásban, így itt a védelemmel illetve a középpályával foglalkoztam.

######Középpályások
"""

Sevilla2022_2023=LL2023[LL2023["Team"]=="Sevilla"]
Sevilla2022_2023_mf=Sevilla2022_2023[Sevilla2022_2023['Pos']=="MF"]
Sevilla2022_2023_mf

#Ivan Rakitić
Rakitić=LL[LL['Player']=="Ivan Rakitić"]
Rakitić=Rakitić[["Gls","Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Rakitić["Clr"])
TklW = np.array(Rakitić["TklW"])
Int = np.array(Rakitić["Int"])
Challenges_Tkl=np.array(Rakitić["Challenges_Tkl"])
Won = np.array(Rakitić["Won"])
Lost = np.array(Rakitić["Lost"])
Err= np.array(Rakitić["Err"])
Ast = np.array(Rakitić["Ast"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Ivan Rakitić meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Joan Jordán
Jordán=LL[LL['Player']=="Joan Jordán"]
Jordán=Jordán[["Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Jordán["Clr"])
TklW = np.array(Jordán["TklW"])
Int = np.array(Jordán["Int"])
Challenges_Tkl=np.array(Jordán["Challenges_Tkl"])
Won = np.array(Jordán["Won"])
Lost = np.array(Jordán["Lost"])
Err= np.array(Jordán["Err"])
Ast = np.array(Jordán["Ast"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Joan Jordán meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Thomas Delaney
BL2019=BL[BL['Season']=="2018-2019"]
Delaney2019=BL2019[BL2019['Player']=="Thomas Delaney"]
Delaney2020=BL2020[BL2020['Player']=="Thomas Delaney"]
Delaney2021=BL2021[BL2021['Player']=="Thomas Delaney"]
Delaney=LL[LL['Player']=="Thomas Delaney"]
Delaney=pd.concat([Delaney,Delaney2021,Delaney2020,Delaney2019])
Delaney=Delaney[["Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Delaney["Clr"])
TklW = np.array(Delaney["TklW"])
Int = np.array(Delaney["Int"])
Challenges_Tkl=np.array(Delaney["Challenges_Tkl"])
Won = np.array(Delaney["Won"])
Lost = np.array(Delaney["Lost"])
Err= np.array(Delaney["Err"])
Ast = np.array(Delaney["Ast"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Thomas Delaney meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""Jól látható, hogy a Sevilla középpályásai mélyen tudásuk alatt teljesítettek, mind a védekezés, mind a támadások segítésében alul múlták az előző szezonokban nyújtott teljesítményeiket.

######Védők
"""

Sevilla2022_2023=LL2023[LL2023["Team"]=="Sevilla"]
Sevilla2022_2023_df=Sevilla2022_2023[Sevilla2022_2023['Pos']=="DF"]
Sevilla2022_2023_df

#Marcos Acuña
Acuña=LL[LL['Player']=="Marcos Acuña"]
Acuña.loc[len(Acuña)] = {'Clr': 0, 'TklW':0, "Int":0, "Challenges_Tkl":0, "Won":0, "Lost":0, "Err":0,'Season': "2018-2019"}
Acuña.loc[len(Acuña)] = {'Clr': 0, 'TklW':0, "Int":0, "Challenges_Tkl":0, "Won":0, "Lost":0, "Err":0,'Season': "2019-2020"}
Acuña=Acuña[["Ast","Gls","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Acuña["Clr"])
TklW = np.array(Acuña["TklW"])
Int = np.array(Acuña["Int"])
Challenges_Tkl=np.array(Acuña["Challenges_Tkl"])
Won = np.array(Acuña["Won"])
Lost = np.array(Acuña["Lost"])
Err= np.array(Acuña["Err"])
Ast=np.array(Acuña["Ast"])
Gls=np.array(Acuña["Gls"])

plt.figure(figsize=(20, 6))


plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')
plt.plot(xpoints, Gls, label='Gólok', marker='s')

plt.title('Marcos Acuña meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Gonzalo Montiel
LL2019=LL[LL['Season']=="2018-2019"]
LL2020=LL[LL['Season']=="2019-2020"]
LL2021=LL[LL['Season']=="2020-2021"]
JN2019=LL2019[LL2019['Player']=="Jesús Navas"]
JN2020=LL2020[LL2020['Player']=="Jesús Navas"]
JN2021=LL2021[LL2021['Player']=="Jesús Navas"]
Montiel=LL[LL['Player']=="Gonzalo Montiel"]
MontielNavas=pd.concat([Montiel,JN2021,JN2020,JN2019])
MontielNavas=MontielNavas[["Ast","Gls","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season","Season(Player)"]].sort_values(by='Season', ascending=True)

Clr = np.array(MontielNavas["Clr"])
TklW = np.array(MontielNavas["TklW"])
Int = np.array(MontielNavas["Int"])
Challenges_Tkl=np.array(MontielNavas["Challenges_Tkl"])
Won = np.array(MontielNavas["Won"])
Lost = np.array(MontielNavas["Lost"])
Err= np.array(MontielNavas["Err"])
Ast=np.array(MontielNavas["Ast"])
Gls=np.array(MontielNavas["Gls"])

plt.figure(figsize=(20, 6))


plt.plot(MontielNavas["Season(Player)"], TklW, label='Sikeres szerelések', marker='s')
plt.plot(MontielNavas["Season(Player)"], Int, label='Közbelépések', marker='s')
plt.plot(MontielNavas["Season(Player)"], Won, label='Nyert fejpárbajok', marker='s')
plt.plot(MontielNavas["Season(Player)"], Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(MontielNavas["Season(Player)"], Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(MontielNavas["Season(Player)"], Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(MontielNavas["Season(Player)"], Ast, label='Gólpasszok', marker='s')
plt.plot(MontielNavas["Season(Player)"], Gls, label='Gólok', marker='s')

plt.title('Gonzalo Montiel meghatározó statisztikáinak alakulása szezononként, viszonyítva Jesús Navashoz aki előtte 3 szezonon át játszott ugyanazon a poszton', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.show()

#Loïc Bade
L12019=L1[L1['Season']=="2018-2019"]
LL2020=LL[LL['Season']=="2019-2020"]
LL2021=LL[LL['Season']=="2020-2021"]
LL2022=LL[LL['Season']=="2021-2022"]
JC2019=L12019[L12019['Player']=="Jules Koundé"]
JC2020=LL2020[LL2020['Player']=="Jules Koundé"]
JC2021=LL2021[LL2021['Player']=="Jules Koundé"]
JC2022=LL2022[LL2022['Player']=="Jules Koundé"]
Bade=LL[LL['Player']=="Loïc Bade"]
BadeKounde=pd.concat([Bade,JC2022,JC2021,JC2020,JC2019],ignore_index=True )
BadeKounde=BadeKounde[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season","Season(Player)"]].sort_values(by='Season', ascending=True)

Clr = np.array(BadeKounde["Clr"])
TklW = np.array(BadeKounde["TklW"])
Int = np.array(BadeKounde["Int"])
Challenges_Tkl=np.array(BadeKounde["Challenges_Tkl"])
Won = np.array(BadeKounde["Won"])
Lost = np.array(BadeKounde["Lost"])
Err= np.array(BadeKounde["Err"])


plt.figure(figsize=(10, 6))

plt.plot(BadeKounde["Season(Player)"], Clr, label='Tisztázások', marker='o')
plt.plot(BadeKounde["Season(Player)"], TklW, label='Sikeres szerelések', marker='s')
plt.plot(BadeKounde["Season(Player)"], Int, label='Közbelépések', marker='s')
plt.plot(BadeKounde["Season(Player)"], Won, label='Nyert fejpárbajok', marker='s')
plt.plot(BadeKounde["Season(Player)"], Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(BadeKounde["Season(Player)"], Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(BadeKounde["Season(Player)"], Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Loïc Bade meghatározó statisztikáinak alakulása szezononként, viszonyítva Jules Koundéhoz aki előtte 3 szezonon át játszott ugyanazon a poszton', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Tanguy Nianzou
L12019=L1[L1['Season']=="2018-2019"]
LL2020=LL[LL['Season']=="2019-2020"]
LL2021=LL[LL['Season']=="2020-2021"]
LL2022=LL[LL['Season']=="2021-2022"]
DC2019=L12019[L12019['Player']=="Diego Carlos"]
DC2020=LL2020[LL2020['Player']=="Diego Carlos"]
DC2021=LL2021[LL2021['Player']=="Diego Carlos"]
DC2022=LL2022[LL2022['Player']=="Diego Carlos"]
Nianzou=LL[LL['Player']=="Tanguy Nianzou"]
NianzouCarlos=pd.concat([Bade,JC2022,JC2021,JC2020,JC2019],ignore_index=True )
NianzouCarlos=NianzouCarlos[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season","Season(Player)"]].sort_values(by='Season', ascending=True)

Clr = np.array(NianzouCarlos["Clr"])
TklW = np.array(NianzouCarlos["TklW"])
Int = np.array(NianzouCarlos["Int"])
Challenges_Tkl=np.array(NianzouCarlos["Challenges_Tkl"])
Won = np.array(NianzouCarlos["Won"])
Lost = np.array(NianzouCarlos["Lost"])
Err= np.array(NianzouCarlos["Err"])


plt.figure(figsize=(20, 6))

plt.plot(NianzouCarlos["Season(Player)"], Clr, label='Tisztázások', marker='o')
plt.plot(NianzouCarlos["Season(Player)"], TklW, label='Sikeres szerelések', marker='s')
plt.plot(NianzouCarlos["Season(Player)"], Int, label='Közbelépések', marker='s')
plt.plot(NianzouCarlos["Season(Player)"], Won, label='Nyert fejpárbajok', marker='s')
plt.plot(NianzouCarlos["Season(Player)"], Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(NianzouCarlos["Season(Player)"], Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(NianzouCarlos["Season(Player)"], Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Tanguy Nianzou meghatározó statisztikáinak alakulása szezononként, viszonyítva Diego Carloséhoz aki előtte 3 szezonon át játszott ugyanazon a poszton', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A belső védelemben Diego Carlos és Jules Koundé stabil teljesítményt nyújtott, azonban az ő távozásukkal 2 fiatal, rutintalan védő Tanguy Nianzu és Loic Bade kerültek a védelem tengelyébe mint alapemberek, és a statisztikák megmutatják, hogy nem is tudták pótolni elődjeiket. A szélsővédőkről (Marcos Acuna,Gonzalo Monitel) ez nem mondható el, ott nem következett be jelentősebb teljesítménybeli romlás.

######Kapus
"""

Sevilla2022_2023=LL2023[LL2023["Team"]=="Sevilla"]
Sevilla2022_2023_gk=Sevilla2022_2023[Sevilla2022_2023['Pos']=="GK"]
Sevilla2022_2023_gk

#Yassine Bounou
Bounou=LL[LL["Player"]=="Yassine Bounou"]
Bounou=Bounou[["Player","GA","Saves","Save%","PK_Save%","CS","Season"]].sort_values(by='Season', ascending=True)

GA = np.array(Bounou["GA"])
Save = np.array(Bounou["Save%"])
PK_Save = np.array(Bounou["PK_Save%"])
CS=np.array(Bounou["CS"])
Saves = np.array(Bounou["Saves"])

plt.figure(figsize=(10, 6))
plt.plot(xpoints, Saves, label='Védések', marker='s')
plt.plot(xpoints, GA, label='Kapott gólok', marker='o')
plt.plot(xpoints, Save, label='Védési hatékonyság', marker='s')
plt.plot(xpoints, PK_Save, label='Büntető védési hatékonyság', marker='s')
plt.plot(xpoints, CS, label='Kapott gól nélküli meccsek', marker='s')


plt.title('Yassine Bounou meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A kapus, Yassine Bounou teljesítményén sem figyelhető meg különösebb romlás.

#####**ÖSSZEGZÉS**
Összességében elmondható, hogy a Sevilla a 2022-2023-as szezonban nyújtott rossz teljesítményét főként belsővédelmének gyengébb teljesítménye okozta, illetve a középpáylások sem mútottak be jó teljesítményt.

##Premier League

###.csv file beolvasása és utótisztítása
"""

PL=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/PL_vegleges.csv")

del PL["Unnamed: 0"]

pd.isnull(PL).sum()

PL[pd.isnull(PL["Age"])][["Player","Age"]]

#Nem tudni a játékos életkorát, így töröltem őt a Dataframeből
PL=PL[PL["Player"]!="Bobby Thomas"]

PL[PL["Player"]=="Bobby Thomas"]

PL=PL.fillna(0)

pd.isnull(PL).sum()

PL.head()

PL.columns

"""###2022-2023
####A 2022-2023-as szezon statisztikái, azok elemzése.

####A dataframe statisztikáinak elemzése, összehasonlítások, rangsorolások
"""

PL2023=PL[PL["Season"]=="2022-2023"]
PL2023

#Értékesített és kihagyott büntetők aránya
PL_Pen_Attempted_2023=PL2023["PKatt"].sum()
PL_Pen_Scored_2023=PL2023["Penalty_Kicks_Made"].sum()
PL_Pen_Missed_2023=PL_Pen_Attempted_2023-PL_Pen_Scored_2023

plt.figure(figsize=(13,6))
plt.title("Értékesített és kihagyott büntetők aránya (2023)")
data=[PL_Pen_Scored_2023,PL_Pen_Missed_2023]
colors=["green","red"]
labels=["Belőtt büntetők","Kihagyott büntetők"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Top 10 legtöbb játékost adó nemzet (2023)
jatekosok_szama = PL2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_nemzet['Nation'], top_10_nemzet['Játékosok száma'], color='skyblue')
plt.xlabel('Nemzet')
plt.ylabel('Játékosok száma')
plt.title('Nemzetek szerinti játékosok száma')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Az előző kimutatás csak kördiagrammal
jatekosok_szama = PL2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")
plt.figure(figsize=(8, 8))
plt.pie(top_10_nemzet['Játékosok száma'], labels=top_10_nemzet['Nation'], autopct='%1.1f%%')
plt.title('Top 10 nemzet játékosainak aránya')
plt.axis('equal')
plt.tight_layout()
plt.show()

top_10_gólpassz_adó_2023_PL = PL2023.groupby('Player')["Ast"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_gólpassz_adó_2023_PL['Player'], top_10_gólpassz_adó_2023_PL['Ast'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

legjobb_golpassz_adok_csapatonként = PL2023.groupby('Team').apply(lambda x: x.nlargest(1, 'Ast')).reset_index(drop=True)
legjobb_golpassz_adok_csapatonként["Player(Team)"]=legjobb_golpassz_adok_csapatonként["Player"]+ " ( " + legjobb_golpassz_adok_csapatonként["Team"] + ")"
legjobb_golpassz_adok_csapatonként=legjobb_golpassz_adok_csapatonként.sort_values(by="Ast",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(legjobb_golpassz_adok_csapatonként['Player(Team)'], legjobb_golpassz_adok_csapatonként['Ast'])
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=65)
plt.tight_layout()
plt.show()

gp_xA_2023_PL = PL2023.groupby('Player').agg({"Ast":'sum','xA':'sum'}).nlargest(10,'Ast').reset_index()

# Oszlopdiagram létrehozása
bar_width = 0.4
index = range(len(gp_xA_2023_PL))
plt.bar(index, gp_xA_2023_PL['Ast'], bar_width, color='skyblue', label='Gólpasszok')
plt.bar([i + bar_width for i in index], gp_xA_2023_PL['xA'], bar_width, color='orange', label='xA mutató')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Játékos gólpasszok és xA mutatója')
plt.xticks([i + bar_width/2 for i in index], gp_xA_2023_PL['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb gólban szerepet vállaló játékos
top10_ga_PL2023=PL2023.nlargest(10,"G+A")
top10_ga_PL2023=top10_ga_PL2023.sort_values(by="G+A",ascending=False)


plt.bar(top10_ga_PL2023["Player"], top10_ga_PL2023['Gls'], color='skyblue', label='Gól')
plt.bar(top10_ga_PL2023["Player"], top10_ga_PL2023['Ast'], bottom=top10_ga_PL2023['Gls'], color='orange', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb gólban szerepet vállaló játékos')
plt.xticks([i + bar_width/2 for i in index], top10_ga_PL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 góllövő és hogy ők hány lövésből szereztek annyi gólt amennyit.
top10_scorer_PL2023=PL2023.nlargest(10,"Gls")
top10_scorer_PL2023=top10_ga_PL2023.sort_values(by="G/Sh",ascending=False)

bar_width = 0.4
index = range(len(top10_scorer_PL2023))
plt.bar(index, top10_scorer_PL2023['SoT'], bar_width, color='skyblue', label='Kaput találó lövések száma')
plt.bar([i + bar_width for i in index], top10_scorer_PL2023['Gls'], bar_width, color='orange', label='Gólok száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('#Top 10 góllövő és hogy ők hány lövésből szereztek annyi gólt amennyit (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_scorer_PL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Pozíciónkénti gólok száma
gls_per_pos_PL_2023=PL2023.groupby('Pos')['Gls'].sum().reset_index()
gls_per_pos_PL_2023=gls_per_pos_PL_2023.sort_values(by="Gls",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(gls_per_pos_PL_2023['Pos'], gls_per_pos_PL_2023['Gls'])
plt.xlabel('Pozíció')
plt.ylabel('Gólok száma')
plt.title('Pozíciónkénti gólok száma (2022-23)')

plt.tight_layout()
plt.show()

#Sárga és piros lapok megoszlása
yellow_PL_2023=PL2023["CrdY"].sum()
red_PL_2023=PL2023["CrdR"].sum()
plt.figure(figsize=(13,6))
plt.title("Sárga és piros lapok megoszlása (2023)")
data=[yellow_PL_2023,red_PL_2023]
colors=["yellow","red"]
labels=["Sárga lapok","Piros lapok"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Legtöbb büntetőlappal rendelkező játékosok
PL2023["cardssum"]=PL2023['CrdY']+PL2023['CrdR']
top10_carded_PL2023=PL2023.nlargest(10,"cardssum")
top10_carded_PL2023=top10_carded_PL2023.sort_values(by="cardssum",ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(top10_carded_PL2023["Player"], top10_carded_PL2023['CrdY'], color='yellow', label='Sárga lap')
plt.bar(top10_carded_PL2023["Player"], top10_carded_PL2023['CrdR'], bottom=top10_carded_PL2023['CrdY'], color='red', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('Lapok száma')
plt.title('#Top 10 legtöbb büntetőlappal rendelkező játékosok (2022-2023)')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

#Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_PL_2023=PL2023[PL2023["Pos"]=="GK"]
KeepertoCompare_PL_2023=Keepers_PL_2023[Keepers_PL_2023["MP"]>=10]
top10_savepercent_PL2023=KeepertoCompare_PL_2023.nlargest(10,"Save%")
top10_savepercent_PL2023=top10_savepercent_PL2023.sort_values(by="Save%",ascending=False)

bar_width = 0.4
index = range(len(top10_savepercent_PL2023))
plt.bar(index, top10_savepercent_PL2023['SoTA'], bar_width, color='skyblue', label='Kapott lövések')
plt.bar([i + bar_width for i in index], top10_savepercent_PL2023['GA'], bar_width, color='orange', label='Kapott gólok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_savepercent_PL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_PL_2023=PL2023[PL2023["Pos"]=="GK"]
KeepertoCompare_PL_2023=Keepers_PL_2023[Keepers_PL_2023["MP"]>=10]
top10_cs_PL2023=KeepertoCompare_PL_2023.nlargest(10,"CS%")
top10_cs_PL2023=top10_cs_PL2023.sort_values(by="MP",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_cs_PL2023))
plt.bar(index, top10_cs_PL2023['MP'], bar_width, color='skyblue', label='Lejátszott meccsek száma')
plt.bar([i + bar_width for i in index], top10_cs_PL2023['CS'], bar_width, color='orange', label='Kapott gól nélküli meccsek száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_cs_PL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobb passzpontossággal rendelkező játékos
gp_pp_2023_PL = PL2023.groupby('Player').agg({"Ast":'sum','Att':'sum','Cmp':'sum','Cmp%':'sum'}).nlargest(10,'Ast').reset_index()
top10_pp_PL2023=gp_pp_2023_PL.sort_values(by="Cmp%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_pp_PL2023))
plt.bar(index, top10_pp_PL2023['Att'], bar_width, color='skyblue', label='Passzok száma')
plt.bar([i + bar_width for i in index], top10_pp_PL2023['Cmp'], bar_width, color='orange', label='Pontos passzok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_pp_PL2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobban szerelő játékos
PL2023["Tkl_Tkl%"]=PL2023['TklW']/PL2023['Tkl']*100
top10_tkl_2023_PL = PL2023.groupby('Player').agg({"Tkl":'sum','TklW':'sum','Tkl_Tkl%':'sum'}).nlargest(10,'TklW').reset_index()
top10_tkl_2023_PL = top10_tkl_2023_PL.sort_values(by="Tkl_Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_tkl_2023_PL))
plt.bar(index, top10_tkl_2023_PL['Tkl'], bar_width, color='skyblue', label='Szerelési kísérletek száma')
plt.bar([i + bar_width for i in index], top10_tkl_2023_PL['TklW'], bar_width, color='orange', label='Sikeres szerelések száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_tkl_2023_PL['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb párharcot nyerő játékos
top10_chl_2023_PL = PL2023.groupby('Player').agg({"Challenges_Tkl":'sum','Lost':'sum','Tkl%':'sum'}).nlargest(10,'Challenges_Tkl').reset_index()
top10_chl_2023_PL = top10_chl_2023_PL.sort_values(by="Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_chl_2023_PL["Player"], top10_chl_2023_PL['Challenges_Tkl'], color='lightgreen', label='Győztes párharcok')
plt.bar(top10_chl_2023_PL["Player"], top10_chl_2023_PL['Lost'], bottom=top10_chl_2023_PL['Challenges_Tkl'], color='red', label='Vesztes párharcok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb párharcot nyerő játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_chl_2023_PL['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

top10_chl_2023_PL

#Top 10 legtöbb párharcot nyerő játékos
top10_TklInt_2023_PL = PL2023.groupby('Player').agg({"Tkl":'sum','Int':'sum','Tkl+Int':'sum'}).nlargest(10,'Tkl+Int').reset_index()
top10_TklInt_2023_PL = top10_TklInt_2023_PL.sort_values(by="Tkl+Int",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_TklInt_2023_PL["Player"], top10_TklInt_2023_PL['Tkl'], color='skyblue', label='Tackle')
plt.bar(top10_TklInt_2023_PL["Player"], top10_TklInt_2023_PL['Int'], bottom=top10_TklInt_2023_PL['Tkl'], color='brown', label='Interception')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb szereléssel és labdaszerzéssel rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_TklInt_2023_PL['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Felszabadítások illetve lövéshez vezető hibák összehasonlítása
PL2023["Player(Team)"]=PL2023["Player"]+ "(" + PL2023["Team"] + ")"
top10_clrerr_2023_PL = PL2023.groupby('Player(Team)').agg({"Clr":'sum','Err':'sum'}).nlargest(10,'Clr').reset_index()
top10_clrerr_2023_PL = top10_clrerr_2023_PL.sort_values(by="Clr",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_clrerr_2023_PL))
plt.bar(index, top10_clrerr_2023_PL['Clr'], bar_width, color='skyblue', label='Szerelési kísérletek száma')
plt.bar([i + bar_width for i in index], top10_clrerr_2023_PL['Err'], bar_width, color='orange', label='Sikeres szerelések száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_clrerr_2023_PL['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

top_10_error_maker_2023_PL = PL2023.groupby('Player')["Err"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_error_maker_2023_PL['Player'], top_10_error_maker_2023_PL['Err'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Lövéshez vezető hibák száma')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Top 10 legtöbb fejpárbajt nyerő játékos
PL2023["Player(Team)"]=PL2023["Player"]+ "(" + PL2023["Team"] + ")"
top10_airduel_2023_PL = PL2023.groupby('Player(Team)').agg({"Won":'sum','Lost':'sum'}).nlargest(10,'Won').reset_index()
top10_airduel_2023_PL = top10_airduel_2023_PL.sort_values(by="Won",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_airduel_2023_PL))
plt.bar(index, top10_airduel_2023_PL['Won'], bar_width, color='skyblue', label='Megnyert fejpárbajok')
plt.bar([i + bar_width for i in index], top10_airduel_2023_PL['Lost'], bar_width, color='orange', label='Elveszett fejpárbajok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_airduel_2023_PL['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

"""####Összefüggések keresése
Bizonoys játékosok statisztikái feltűnően gyengébbek az elvártnál, ezért meg szeretném vizsgálni, hogy ezen játékosok mélyrepülése hogyan hatott a csapatuk teljesítményére. Ehhez szükségem volt a bajnoki tabellára
"""

PL_table=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/PL_tables.csv")

PL_table

del PL_table["Unnamed: 0"]

PL_table

"""#####Premier League tabella 2022-2023"""

PL_table_2023=PL_table[PL_table["Season"]=="2022-2023"]
PL_table_2023

"""#####A Leicester City kiesése"""

Leicester=PL_table[PL_table["Squad"]=="Leicester City"]
Leicester=Leicester[["Rk","Season"]].sort_values(by='Season', ascending=True)

xpoints = np.array(Leicester["Season"])
ypoints = np.array(Leicester["Rk"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Leicester["Rk"], label='Helyezés', marker='s')

plt.title('A Leicester elmúlt 5 évben elért bajnoki helyezései', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Helyezés', fontsize=12)
plt.legend()
plt.show()

"""Mint az látható nagy meglepetésre a Leicester City 18-ik helyen végzett (tehát kiesett az első osztályból) a 2022-2023-as kiírásban, decára annak hogy előtte éveken stabilan top 10-es csapat volt. Megvizsgáltam hát a meghatározó játékosainak teljesítményét."""

Leicester=PL_table[PL_table["Squad"]=="Leicester City"]
Leicester_gf_ga=Leicester[["Season","GF","GA"]].sort_values(by='Season', ascending=True)

gf = np.array(Leicester_gf_ga["GF"])
ga = np.array(Leicester_gf_ga["GA"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gf, label='Szerzett gólok', marker='o')
plt.plot(xpoints, ga, label='Kapott gólok', marker='s')

plt.title('Leicester City lőtt és kapott góljai az elmúlt 5 szezonban', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Lőtt és kapott gólok', fontsize=12)


plt.legend()


plt.show()

"""Az ábrából kitűnik, hogy a korábbi évekhez képest sokkal kevesebb rúgtak és sokkal több gólt kaptak. Így a támadók és a védők teljesítményét egyaránt meg kell vizsgálni.

######Támadók
"""

Leicester2022_2023=PL2023[PL2023["Team"]=="Leicester City"]
Leicester2022_2023_att=Leicester2022_2023[Leicester2022_2023['Pos'].str.contains(r'\bFW\b')]
Leicester2022_2023_att

#Harvey Barnes
HarveyBarnes=PL[PL["Player"]=="Harvey Barnes"]
HarveyBarnes=HarveyBarnes[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(HarveyBarnes["Gls"])
ast = np.array(HarveyBarnes["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Harvey Barnes Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)


plt.legend()


plt.show()

#Jamie Vardy
JamieVardy=PL[PL["Player"]=="Jamie Vardy"]
JamieVardy=JamieVardy[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(JamieVardy["Gls"])
ast = np.array(JamieVardy["Ast"])

# Az ábra inicializálása
plt.figure(figsize=(10, 6))  # Ábra mérete

# Gólok vonalának hozzáadása az ábrához
plt.plot(xpoints, gls, label='Gólok', marker='o')

# Asszisztok vonalának hozzáadása az ábrához
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

# Az ábra címe és tengelyfeliratai
plt.title('Jamie Vardy góljai és gólpasszai szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)

# Az ábra jelmagyarázata (legend)
plt.legend()

# Az ábra megjelenítése
plt.show()

#James Maddison
Maddison=PL[PL["Player"]=="James Maddison"]
Maddison=Maddison[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Maddison["Gls"])
ast = np.array(Maddison["Ast"])

# Az ábra inicializálása
plt.figure(figsize=(10, 6))  # Ábra mérete

# Gólok vonalának hozzáadása az ábrához
plt.plot(xpoints, gls, label='Gólok', marker='o')

# Asszisztok vonalának hozzáadása az ábrához
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

# Az ábra címe és tengelyfeliratai
plt.title('James Maddison góljai és gólpasszai szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)

# Az ábra jelmagyarázata (legend)
plt.legend()

# Az ábra megjelenítése
plt.show()

#Kelechi Iheanacho
Iheanacho=PL[PL["Player"]=="Kelechi Iheanacho"]
Iheanacho=Iheanacho[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Iheanacho["Gls"])
ast = np.array(Iheanacho["Ast"])

# Az ábra inicializálása
plt.figure(figsize=(10, 6))  # Ábra mérete

# Gólok vonalának hozzáadása az ábrához
plt.plot(xpoints, gls, label='Gólok', marker='o')

# Asszisztok vonalának hozzáadása az ábrához
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

# Az ábra címe és tengelyfeliratai
plt.title('James Maddison góljai és gólpasszai szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)

# Az ábra jelmagyarázata (legend)
plt.legend()

# Az ábra megjelenítése
plt.show()

"""A 4 vizsgált játékos húzóembere volt az évek alatt a Leicester City támadójátékának, azonban mindhárom játékos teljesítménye visszább esett, különösen Jamie Vardyé aki a csapat gólfelelőse volt és szezonokon át ott volt a legeredményesebb gól lövők között, azonban az ő teljesítménye drasztikusan visszaesett, ami a góllövést illeti.

######Középpályások
"""

Leicester2022_2023=PL2023[PL2023["Team"]=="Leicester City"]
Leicester2022_2023_mf=Leicester2022_2023[Leicester2022_2023['Pos']=="MF"]
Leicester2022_2023_mf=Leicester2022_2023_mf[Leicester2022_2023['Starts']>=19]
Leicester2022_2023_mf

#Youri Tielemans
Tielemenas=PL[PL['Player']=="Youri Tielemans"]
Tielemenas=Tielemenas[["Gls","Ast","xA","Season"]].sort_values(by='Season', ascending=True)

Ast = np.array(Tielemenas["Ast"])
xA = np.array(Tielemenas["xA"])
Gls = np.array(Tielemenas["Gls"])
# Az ábra inicializálása
plt.figure(figsize=(10, 6))

plt.plot(xpoints, Ast, label='Gólpasszok', marker='o')
plt.plot(xpoints, xA, label='Várható gólpasszok', marker='s')
plt.plot(xpoints, Gls, label='Gólok', marker='s')


plt.title('Youri Tielemans meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

Ndidi=PL[PL['Player']=="Wilfred Ndidi"]
Ndidi=Ndidi[["Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Ndidi["Clr"])
TklW = np.array(Ndidi["TklW"])
Int = np.array(Ndidi["Int"])
Challenges_Tkl=np.array(Ndidi["Challenges_Tkl"])
Won = np.array(Ndidi["Won"])
Lost = np.array(Ndidi["Lost"])
Err= np.array(Ndidi["Err"])
Ast = np.array(Ndidi["Ast"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Wilfried Ndidi meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""Jól látható, hogy mindkét középpályás azon statisztikái amelyek meghatározzák a játékukat javarészt romlottak a szezonok során konstansan, tehát a csapatnak a pálya tengelyében is voltak problémái.

######Védők
"""

Leicester2022_2023=PL2023[PL2023["Team"]=="Leicester City"]
Leicester2022_2023_df=Leicester2022_2023[Leicester2022_2023['Pos']=="DF"]
Leicester2022_2023_df=Leicester2022_2023_df[Leicester2022_2023['Starts']>=12]
Leicester2022_2023_df

#Timothy Castagne
Castagne=PL[PL['Player']=="Timothy Castagne"]
Castagne.loc[len(Castagne)] = {'Ast': 0, 'Clr':0,'Season': "2018-2019",'TklW': 0,'Challenges_Tkl': 0,'Int': 0,'Won': 0,'Err': 0}
Castagne.loc[len(Castagne)] = {'Ast': 0, 'Clr':0,'Season': "2019-2020",'TklW': 0,'Challenges_Tkl': 0,'Int': 0,'Won': 0,'Err': 0}
Castagne=Castagne[["Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Castagne["Clr"])
TklW = np.array(Castagne["TklW"])
Int = np.array(Castagne["Int"])
Challenges_Tkl=np.array(Castagne["Challenges_Tkl"])
Won = np.array(Castagne["Won"])
Lost = np.array(Castagne["Lost"])
Err= np.array(Castagne["Err"])
Ast=np.array(Castagne["Ast"])

plt.figure(figsize=(10, 6))


plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Timothy Castagne meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Jonny Evans
Evans=PL[PL['Player']=="Jonny Evans"]
Evans=Evans[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Evans["Clr"])
TklW = np.array(Evans["TklW"])
Int = np.array(Evans["Int"])
Challenges_Tkl=np.array(Evans["Challenges_Tkl"])
Won = np.array(Evans["Won"])
Lost = np.array(Evans["Lost"])
Err= np.array(Evans["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Jonny Evans meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A védők esetén ugyanaz figyelhető meg mint a középpályásoknál, kivéve Timothy Castagnet aki jó évet zárt, nem csoda, hogy nem tartott a másodosztályba a Leicesterrel.

######Kapus(ok)
"""

Leicester2022_2023=PL2023[PL2023["Team"]=="Leicester City"]
Leicester2022_2023_gk=Leicester2022_2023[Leicester2022_2023['Pos']=="GK"]
Leicester2022_2023_gk=Leicester2022_2023_gk[Leicester2022_2023['Starts']>=26]
Leicester2022_2023_gk

PL2019=PL[PL['Season']=='2018-2019']
Leicester2018_2019=PL2019[PL2019["Team"]=="Leicester City"]
Leicester2018_2019_gk=Leicester2018_2019[Leicester2018_2019['Pos']=="GK"]
Leicester2018_2019_gk=Leicester2018_2019_gk[Leicester2018_2019_gk['Starts']>=38]
Leicester2018_2019_gk

PL2020=PL[PL['Season']=='2019-2020']
Leicester2019_2020=PL2020[PL2020["Team"]=="Leicester City"]
Leicester2019_2020_gk=Leicester2019_2020[Leicester2019_2020['Pos']=="GK"]
Leicester2019_2020_gk=Leicester2019_2020_gk[Leicester2019_2020_gk['Starts']>=38]
Leicester2019_2020_gk

PL2021=PL[PL['Season']=='2020-2021']
Leicester2020_2021=PL2021[PL2021["Team"]=="Leicester City"]
Leicester2020_2021_gk=Leicester2020_2021[Leicester2020_2021['Pos']=="GK"]
Leicester2020_2021_gk=Leicester2020_2021_gk[Leicester2020_2021_gk['Starts']>=38]
Leicester2020_2021_gk

PL2022=PL[PL['Season']=='2021-2022']
Leicester2021_2022=PL2022[PL2022["Team"]=="Leicester City"]
Leicester2021_2022_gk=Leicester2021_2022[Leicester2021_2022['Pos']=="GK"]
Leicester2021_2022_gk=Leicester2021_2022_gk[Leicester2021_2022_gk['Starts']>=37]
Leicester2021_2022_gk

gk_df = pd.concat([Leicester2022_2023_gk, Leicester2021_2022_gk, Leicester2020_2021_gk, Leicester2019_2020_gk, Leicester2018_2019_gk], ignore_index=True)
gk_df

gk=gk_df[["Player","GA","Saves","Save%","PK_Save%","CS","Season"]].sort_values(by='Season', ascending=True)

GA = np.array(gk["GA"])
Save = np.array(gk["Save%"])
PK_Save = np.array(gk["PK_Save%"])
CS=np.array(gk["CS"])
Saves = np.array(gk["Saves"])

plt.figure(figsize=(10, 6))
plt.plot(xpoints, Saves, label='Védések', marker='s')
plt.plot(xpoints, GA, label='Kapott gólok', marker='o')
plt.plot(xpoints, Save, label='Védési hatékonyság', marker='s')
plt.plot(xpoints, PK_Save, label='Büntető védési hatékonyság', marker='s')
plt.plot(xpoints, CS, label='Kapott gól nélküli meccsek', marker='s')


plt.title('Kapusok meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""Kapusok terén, megállapítható hogy Kasper Schmeichel 2022-es távozásával olyan ürt hagyott maga után amelyet Danny Ward nem tudott betölteni, de itt azért nem olyan vészes a statisztikák változása, sőt vannak statisztikák amelyekben jobban is teljesített Ward.

######**ÖSSZEGZÉS**
Összegzés gyanánt megállapítható, hogy a Leicester City vesztét húzóembereinek a teljesítményének a drasztikus visszaesése okozta.

#####Az Arsenal felemelkedése
"""

Arsenal=PL_table[PL_table["Squad"]=="Arsenal"]
Arsenal=Arsenal[["Rk","Season"]].sort_values(by='Season', ascending=True)

xpoints = np.array(Arsenal["Season"])
ypoints = np.array(Arsenal["Rk"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Arsenal["Rk"], label='Helyezés', marker='s')

plt.title('Az Arsenal elmúlt 5 évben elért bajnoki helyezései', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Helyezés', fontsize=12)
plt.legend()
plt.show()

"""Mint az látható nagy meglepetésre az Arsenal a 2-ik, bajnokok ligája indulást jelentő helyen végzett a 2022-2023-as kiírásban, decára annak hogy előtte éveken át top 4-be se került a csapat. Megvizsgáltam hát a meghatározó játékosainak teljesítményét."""

Arsenal=PL_table[PL_table["Squad"]=="Arsenal"]
Arsenal_gf_ga=Arsenal[["Season","GF","GA"]].sort_values(by='Season', ascending=True)

gf = np.array(Arsenal_gf_ga["GF"])
ga = np.array(Arsenal_gf_ga["GA"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gf, label='Szerzett gólok', marker='o')
plt.plot(xpoints, ga, label='Kapott gólok', marker='s')

plt.title('Arsenal lőtt és kapott góljai az elmúlt 5 szezonban', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Lőtt és kapott gólok', fontsize=12)
plt.legend()
plt.show()

"""Az ábrából kitűnik, hogy a korábbi évekhez képest sokkal több gólt rúgtak és valamennyivel kevesebb több gólt kaptak. Így itt inkább a támadók teljesítményét elemeztem

######Támadók
"""

Arsenal2022_2023=PL2023[PL2023["Team"]=="Arsenal"]
Arsenal2022_2023_att=Arsenal2022_2023[Arsenal2022_2023['Pos'].str.contains(r'\bFW\b')]
Arsenal2022_2023_att

Saka=PL[PL["Player"]=="Bukayo Saka"]
Saka=Saka[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Saka["Gls"])
ast = np.array(Saka["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Bukayo Saka Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)


plt.legend()


plt.show()

#Gabriel Martinelli

Martinelli=PL[PL["Player"]=="Gabriel Martinelli"]
Martinelli.loc[len(Martinelli)] = {'Gls': 0, 'Ast':0,'Season': "2018-2019"}
Martinelli=Martinelli[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)


gls = np.array(Martinelli["Gls"])
ast = np.array(Martinelli["Ast"])

# Az ábra inicializálása
plt.figure(figsize=(10, 6))  # Ábra mérete

# Gólok vonalának hozzáadása az ábrához
plt.plot(xpoints, gls, label='Gólok', marker='o')

# Asszisztok vonalának hozzáadása az ábrához
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

# Az ábra címe és tengelyfeliratai
plt.title('Gabriel Martinelli góljai és gólpasszai szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)

plt.legend()
plt.show()

Jesus=PL[PL["Player"]=="Gabriel Jesus"]
Jesus=Jesus[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Jesus["Gls"])
ast = np.array(Jesus["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Bukayo Saka Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)


plt.legend()


plt.show()

Trossard2023=PL2023[PL2023['Player']=='Leandro Trossard']
Trossard2023 = Trossard2023.groupby('Player').agg({"Gls":'sum','Ast':'sum','Season':lambda x: x.iloc[0]}).reset_index()

Trossard2022=PL2022[PL2022['Player']=='Leandro Trossard']
Trossard2021=PL2021[PL2021['Player']=='Leandro Trossard']
Trossard2020=PL2020[PL2020['Player']=='Leandro Trossard']
Trossard = pd.concat([Trossard2023, Trossard2022, Trossard2021, Trossard2020], ignore_index=True)
Trossard.loc[len(Trossard)] = {'Gls': 0, 'Ast':0,'Season': "2018-2019"}
Trossard=Trossard[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Trossard["Gls"])
ast = np.array(Trossard["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Leandro Trossard Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)


plt.legend()


plt.show()

Nketiah=PL[PL["Player"]=="Eddie Nketiah"]
Nketiah=Nketiah[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Nketiah["Gls"])
ast = np.array(Nketiah["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Eddie Nketiah Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)


plt.legend()


plt.show()

"""######Középpálya"""

Arsenal2022_2023=PL2023[PL2023["Team"]=="Arsenal"]
Arsenal2022_2023_mf=Arsenal2022_2023[Arsenal2022_2023['Pos']=="MF"]
Arsenal2022_2023_mf

Odegaard=PL[PL["Player"]=="Martin Ødegaard"]
Odegaard.loc[len(Odegaard)] = {'Gls': 0, 'Ast':0,'Season': "2018-2019"}
Odegaard.loc[len(Odegaard)] = {'Gls': 0, 'Ast':0,'Season': "2019-2020"}
Odegaard=Odegaard[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)
gls = np.array(Odegaard["Gls"])
ast = np.array(Odegaard["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Martin Ødegaard Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)

"""A 6 vizsgált játékos húzóembere volt az évek alatt a Arsenal támadójátékának, és mindegyik játékos teljesítménye növekvő tendenciát mutat ezáltal kijelenthető, hogy az Arsenal sikerrességének kulcsa a 2022-2023-as szezonban támadójátékának minőségében rejlett.

#####A Liverpool mélyrepülése
"""

Liverpool=PL_table[PL_table["Squad"]=="Liverpool"]
Liverpool=Liverpool[["Rk","Season"]].sort_values(by='Season', ascending=True)

xpoints = np.array(Liverpool["Season"])
ypoints = np.array(Liverpool["Rk"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Liverpool["Rk"], label='Helyezés', marker='s')

plt.title('A Liverpool elmúlt 5 évben elért bajnoki helyezései', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Helyezés', fontsize=12)
plt.legend()
plt.show()

"""Mint az látható nagy meglepetésre a Liverpool 5-ik helyen végzett (tehát nem jutott be a bajnokok ligájába) a 2022-2023-as kiírásban, decára annak, hogy előtte éveken át stabilan top 3-ban végzett a csapat. Megvizsgáltam hát a meghatározó játékosainak teljesítményét."""

Liverpool=PL_table[PL_table["Squad"]=="Liverpool"]
Liverpool_gf_ga=Liverpool[["Season","GF","GA"]].sort_values(by='Season', ascending=True)

gf = np.array(Liverpool_gf_ga["GF"])
ga = np.array(Liverpool_gf_ga["GA"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gf, label='Szerzett gólok', marker='o')
plt.plot(xpoints, ga, label='Kapott gólok', marker='s')

plt.title('Liverpool lőtt és kapott góljai az elmúlt 5 szezonban', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Lőtt és kapott gólok', fontsize=12)


plt.legend()


plt.show()

"""Az ábrából kitűnik, hogy a 2022-2023-as szezonhoz képest sokkal kevesebb gólt rúgtak és sokkal több gólt kaptak. Így a támadók és a védők teljesítményét egyaránt meg kell vizsgálni.

######Támadók
"""

Liverpool2022_2023=PL2023[PL2023["Team"]=="Liverpool"]
Liverpool2022_2023_att=Liverpool2022_2023[Liverpool2022_2023['Pos'].str.contains(r'\bFW\b')]
Liverpool2022_2023_att

#Mohamed Salah
Salah=PL[PL["Player"]=="Mohamed Salah"]
Salah=Salah[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Salah["Gls"])
ast = np.array(Salah["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Mohamed Salah Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)
plt.legend()
plt.show()

#Roberto Firmino
Firmino=PL[PL["Player"]=="Roberto Firmino"]
Firmino=Firmino[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Firmino["Gls"])
ast = np.array(Firmino["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Roberto Firmino Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)
plt.legend()
plt.show()

#Diogo Jota
Jota2023=PL2023[PL2023['Player']=='Diogo Jota']
Jota2022=PL2022[PL2022['Player']=='Diogo Jota']
Jota2021=PL2021[PL2021['Player']=='Diogo Jota']
Jota2021 = Jota2021.groupby('Player').agg({"Gls":'sum','Ast':'sum','Season':lambda x: x.iloc[0]}).reset_index()
Jota2020=PL2020[PL2020['Player']=='Diogo Jota']
Jota2019=PL2019[PL2019['Player']=='Diogo Jota']
Jota = pd.concat([Jota2023, Jota2022, Jota2021, Jota2020,Jota2019], ignore_index=True)
Jota=Jota[["Gls","Ast","Season"]].sort_values(by='Season', ascending=True)

gls = np.array(Jota["Gls"])
ast = np.array(Jota["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, gls, label='Gólok', marker='o')
plt.plot(xpoints, ast, label='Gólpasszok', marker='s')

plt.title('Diogo Jota Gólok és Asszisztok szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)


plt.legend()


plt.show()

"""A 3 vizsgált játékos húzóembere volt az évek alatt a Liverpool támadójátékának, azonban Mohamed Salah illetve Diogo Jota teljesítménye is visszább esett, különösen Diogo Jotaé aki a csapat egyik gólfelelőse volt, de Salah teljesítménye is romló tendeciát mutatott.

######Középpályások
"""

Liverpool2022_2023=PL2023[PL2023["Team"]=="Liverpool"]
Liverpool2022_2023_mf=Liverpool2022_2023[Liverpool2022_2023['Pos']=="MF"]
Liverpool2022_2023_mf

#Fabinho
Fabinho=PL[PL['Player']=="Fabinho"]
Fabinho=Fabinho[["Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Fabinho["Clr"])
TklW = np.array(Fabinho["TklW"])
Int = np.array(Fabinho["Int"])
Challenges_Tkl=np.array(Fabinho["Challenges_Tkl"])
Won = np.array(Fabinho["Won"])
Lost = np.array(Fabinho["Lost"])
Err= np.array(Fabinho["Err"])
Ast = np.array(Fabinho["Ast"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Fabinho meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Jordan Henderson
Henderson=PL[PL['Player']=="Jordan Henderson"]
Henderson=Henderson[["Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Henderson["Clr"])
TklW = np.array(Henderson["TklW"])
Int = np.array(Henderson["Int"])
Challenges_Tkl=np.array(Henderson["Challenges_Tkl"])
Won = np.array(Henderson["Won"])
Lost = np.array(Henderson["Lost"])
Err= np.array(Henderson["Err"])
Ast = np.array(Henderson["Ast"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Jordan Henderson meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Thiago Alcántara - Támadásépítés
Thiago2019=BL2019[BL2019["Player"]=="Thiago Alcántara"]
Thiago2020=BL2020[BL2020["Player"]=="Thiago Alcántara"]
Thiago=PL[PL["Player"]=="Thiago Alcántara"]
Thiago=pd.concat([Thiago,Thiago2020,Thiago2019],ignore_index=True)
Thiago=Thiago[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Thiago["Cmp"])
PrgDist = np.array(Thiago["PrgDist"])



plt.figure(figsize=(15, 6))

plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Thiago Alcántara meghatározó támadásépítési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Thiago Alcántara - Egyéb statisztikák
Thiago2019=BL2019[BL2019["Player"]=="Thiago Alcántara"]
Thiago2020=BL2020[BL2020["Player"]=="Thiago Alcántara"]
Thiago=PL[PL["Player"]=="Thiago Alcántara"]
Thiago=pd.concat([Thiago,Thiago2020,Thiago2019])
Thiago=Thiago[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Thiago["TklW"])
Int = np.array(Thiago["Int"])
Err= np.array(Thiago["Err"])
Ast = np.array(Thiago["Ast"])
Gls = np.array(Thiago["Gls"])


plt.figure(figsize=(15, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Thiago Alcántara egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Curtis Jones - Támadásépítés
Jones=PL[PL["Player"]=="Curtis Jones"]
Jones=Jones[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Jones["Cmp"])
PrgDist = np.array(Jones["PrgDist"])



plt.figure(figsize=(15, 6))

plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Curtis Jones meghatározó támadásépítési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Curtis Jones - Egyéb statisztikák
Jones=PL[PL["Player"]=="Curtis Jones"]
Jones=Jones[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Jones["TklW"])
Int = np.array(Jones["Int"])
Err= np.array(Jones["Err"])
Ast = np.array(Jones["Ast"])
Gls = np.array(Jones["Gls"])


plt.figure(figsize=(15, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Curtis Jones egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Naby Keïta - Támadásépítés
Keïta=PL[PL["Player"]=="Naby Keïta"]
Keïta=Keïta[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)


Cmp = np.array(Keïta["Cmp"])
PrgDist = np.array(Keïta["PrgDist"])



plt.figure(figsize=(15, 6))
plt.plot(xpoints, Cmp, label='Sikeres passzok', marker='s')
plt.plot(xpoints, PrgDist, label='Támadó jellegű passzok össz távolsága', marker='s')

plt.title('Naby Keïta meghatározó támadásépítési statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Naby Keïta - Egyéb statisztikák
Keïta=PL[PL["Player"]=="Naby Keïta"]
Keïta=Keïta[["Gls","Ast","Season","TklW","Err","Cmp","PrgDist","Int"]].sort_values(by='Season', ascending=True)

TklW = np.array(Keïta["TklW"])
Int = np.array(Keïta["Int"])
Err= np.array(Keïta["Err"])
Ast = np.array(Keïta["Ast"])
Gls = np.array(Keïta["Gls"])


plt.figure(figsize=(10, 6))
plt.plot(xpoints, Gls, label='Gólok', marker='s')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')


plt.title('Naby Keïta egyéb meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""Jól látható, hogy a középpályások azon statisztikái amelyek meghatározzák a játékukat javarészt romlottak, tehát a csapatnak a pálya tengelyében is voltak problémái. Tekintve hogy a Liverpool játéka erősen függ attól, hogy a középpályát mennyire tudják kontrollálni, látva a fenti statisztikákat, nem csoda a mélyrepülés.

######Védők
"""

Liverpool2022_2023=PL2023[PL2023["Team"]=="Liverpool"]
Liverpool2022_2023_df=Liverpool2022_2023[Liverpool2022_2023['Pos']=="DF"]
Liverpool2022_2023_df=Liverpool2022_2023_df[Liverpool2022_2023['Starts']>=12]
Liverpool2022_2023_df

#Trent Alexander-Arnold
TAA=PL[PL['Player']=="Trent Alexander-Arnold"]
TAA=TAA[["Ast","Gls","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(TAA["Clr"])
TklW = np.array(TAA["TklW"])
Int = np.array(TAA["Int"])
Challenges_Tkl=np.array(TAA["Challenges_Tkl"])
Won = np.array(TAA["Won"])
Lost = np.array(TAA["Lost"])
Err= np.array(TAA["Err"])
Ast=np.array(TAA["Ast"])
Gls=np.array(TAA["Gls"])

plt.figure(figsize=(10, 6))


plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')
plt.plot(xpoints, Gls, label='Gólok', marker='s')

plt.title('Trent Alexander-Arnold meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Andrew Robertson
Robbo=PL[PL['Player']=="Andrew Robertson"]
Robbo=Robbo[["Ast","Gls","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Robbo["Clr"])
TklW = np.array(Robbo["TklW"])
Int = np.array(Robbo["Int"])
Challenges_Tkl=np.array(Robbo["Challenges_Tkl"])
Won = np.array(Robbo["Won"])
Lost = np.array(Robbo["Lost"])
Err= np.array(Robbo["Err"])
Ast=np.array(Robbo["Ast"])
Gls=np.array(Robbo["Gls"])

plt.figure(figsize=(10, 6))


plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')
plt.plot(xpoints, Gls, label='Gólok', marker='s')

plt.title('Andrew Robertson meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Virgil van Dijk
VVD=PL[PL['Player']=="Virgil van Dijk"]
VVD=VVD[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(VVD["Clr"])
TklW = np.array(VVD["TklW"])
Int = np.array(VVD["Int"])
Challenges_Tkl=np.array(VVD["Challenges_Tkl"])
Won = np.array(VVD["Won"])
Lost = np.array(VVD["Lost"])
Err= np.array(VVD["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Virgil van Dijk meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Joe Gomez
Gomez=PL[PL['Player']=="Joe Gomez"]
Gomez=Gomez[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Gomez["Clr"])
TklW = np.array(Gomez["TklW"])
Int = np.array(Gomez["Int"])
Challenges_Tkl=np.array(Gomez["Challenges_Tkl"])
Won = np.array(Gomez["Won"])
Lost = np.array(Gomez["Lost"])
Err= np.array(Gomez["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Joe Gomez meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Joël Matip
Matip=PL[PL['Player']=="Joël Matip"]
Matip=Matip[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Matip["Clr"])
TklW = np.array(Matip["TklW"])
Int = np.array(Matip["Int"])
Challenges_Tkl=np.array(Matip["Challenges_Tkl"])
Won = np.array(Matip["Won"])
Lost = np.array(Matip["Lost"])
Err= np.array(Matip["Err"])


plt.figure(figsize=(10, 6))

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


plt.title('Joël Matip meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

#Ibrahima Konaté
Konaté2019=BL2019[BL2019["Player"]=="Ibrahima Konaté"]
Konaté2020=BL2020[BL2020["Player"]=="Ibrahima Konaté"]
Konaté2021=BL2021[BL2021["Player"]=="Ibrahima Konaté"]
Konaté=PL[PL["Player"]=="Ibrahima Konaté"]
Konaté=pd.concat([Konaté,Konaté2021,Konaté2020,Konaté2019],ignore_index=True)
Konaté=Konaté[["Clr","TklW","Season","Int","Challenges_Tkl","Won","Lost","Err"]].sort_values(by='Season', ascending=True)

Clr = np.array(Konaté["Clr"])
TklW = np.array(Konaté["TklW"])
Int = np.array(Konaté["Int"])
Challenges_Tkl=np.array(Konaté["Challenges_Tkl"])
Won = np.array(Konaté["Won"])
Lost = np.array(Konaté["Lost"])
Err= np.array(Konaté["Err"])

plt.figure(figsize=(10, 6))
plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')

plt.title('Ibrahima Konaté meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A védők statisztikáit elemezve arra a következtetésre jutottam, hogy Joel Matip gyengébb szereplése mellett a többi védő eljesítménye nem vagy csak kis mértékben romlott így ez nem okozhatta a Liverpool vesszőfutását.

######Kapus
"""

Liverpool2022_2023=PL2023[PL2023["Team"]=="Liverpool"]
Liverpool2022_2023_gk=Liverpool2022_2023[Liverpool2022_2023['Pos']=="GK"]
Liverpool2022_2023_gk

#Alisson
Alisson=PL[PL["Player"]=="Alisson"]
Alisson=Alisson[["Player","GA","Saves","Save%","PK_Save%","CS","Season"]].sort_values(by='Season', ascending=True)

GA = np.array(Alisson["GA"])
Save = np.array(Alisson["Save%"])
PK_Save = np.array(Alisson["PK_Save%"])
CS=np.array(Alisson["CS"])
Saves = np.array(Alisson["Saves"])

plt.figure(figsize=(10, 6))
plt.plot(xpoints, Saves, label='Védések', marker='s')
plt.plot(xpoints, GA, label='Kapott gólok', marker='o')
plt.plot(xpoints, Save, label='Védési hatékonyság', marker='s')
plt.plot(xpoints, PK_Save, label='Büntető védési hatékonyság', marker='s')
plt.plot(xpoints, CS, label='Kapott gól nélküli meccsek', marker='s')


plt.title('Alisson meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""A kapus, Alisson teljesítményén sem figyelhető meg különösebb romlás.

######**ÖSSZEGZÉS**
Összességében elmondható, hogy a Liverpool a 2022-2023-as szezonban nyújtott rossz teljesítményét főként középpályásainak gyengébb teljesítménye okozta.

##Serie A

###.csv file beolvasása és utótisztítása
"""

SA=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/SerieA_vegleges.csv")

del SA["Unnamed: 0"]

pd.isnull(SA).sum()

SA[pd.isnull(SA["Nation"])][["Player","Nation"]]

#Nem tudni a játékos életkorát, így töröltem őt a Dataframeből
SA=SA[SA["Player"]!="Roman Lazar"]
SA=SA[SA["Player"]!="Jan Kubala"]
SA=SA[SA["Player"]!="Sinan Gümüş"]
SA=SA[SA["Player"]!="Alessio da Cruz"]

SA=SA.fillna(0)

pd.isnull(SA).sum()

SA["Player(Team)"]=SA["Player"]+ "(" + SA["Team"] + ")"
SA["Season(Player)"]=SA["Season"]+ "(" + SA["Player"] + ")"

SA.head()

SA.columns

"""###2022-2023
####A 2022-2023-as szezon statisztikái, azok elemzése.

####A dataframe statisztikáinak elemzése, összehasonlítások, rangsorolások
"""

SA2023=SA[SA["Season"]=="2022-2023"]
SA2023

#Értékesített és kihagyott büntetők aránya
SA_Pen_Attempted_2023=SA2023["PKatt"].sum()
SA_Pen_Scored_2023=SA2023["Penalty_Kicks_Made"].sum()
SA_Pen_Missed_2023=SA_Pen_Attempted_2023-SA_Pen_Scored_2023

plt.figure(figsize=(13,6))
plt.title("Értékesített és kihagyott büntetők aránya (2023)")
data=[SA_Pen_Scored_2023,SA_Pen_Missed_2023]
colors=["green","red"]
labels=["Belőtt büntetők","Kihagyott büntetők"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Top 10 legtöbb játékost adó nemzet (2023)
jatekosok_szama = SA2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_nemzet['Nation'], top_10_nemzet['Játékosok száma'], color='skyblue')
plt.xlabel('Nemzet')
plt.ylabel('Játékosok száma')
plt.title('Nemzetek szerinti játékosok száma')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Az előző kimutatás csak kördiagrammal
jatekosok_szama = SA2023.groupby('Nation').size().reset_index(name='Játékosok száma')
top_10_nemzet=jatekosok_szama.nlargest(10,"Játékosok száma")
plt.figure(figsize=(8, 8))
plt.pie(top_10_nemzet['Játékosok száma'], labels=top_10_nemzet['Nation'], autopct='%1.1f%%')
plt.title('Top 10 nemzet játékosainak aránya')
plt.axis('equal')
plt.tight_layout()
plt.show()

top_10_gólpassz_adó_2023_SA = SA2023.groupby('Player')["Ast"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_gólpassz_adó_2023_SA['Player'], top_10_gólpassz_adó_2023_SA['Ast'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

legjobb_golpassz_adok_csapatonként = SA2023.groupby('Team').apply(lambda x: x.nlargest(1, 'Ast')).reset_index(drop=True)
legjobb_golpassz_adok_csapatonként["Player(Team)"]=legjobb_golpassz_adok_csapatonként["Player"]+ " ( " + legjobb_golpassz_adok_csapatonként["Team"] + ")"
legjobb_golpassz_adok_csapatonként=legjobb_golpassz_adok_csapatonként.sort_values(by="Ast",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(legjobb_golpassz_adok_csapatonként['Player(Team)'], legjobb_golpassz_adok_csapatonként['Ast'])
plt.xlabel('Játékos')
plt.ylabel('Gólpasszok')
plt.title('Top 10 gólpassz adó (2022-23)')
plt.xticks(rotation=65)
plt.tight_layout()
plt.show()

gp_xA_2023_SA = SA2023.groupby('Player').agg({"Ast":'sum','xA':'sum'}).nlargest(10,'Ast').reset_index()

# Oszlopdiagram létrehozása
bar_width = 0.4
index = range(len(gp_xA_2023_SA))
plt.bar(index, gp_xA_2023_SA['Ast'], bar_width, color='skyblue', label='Gólpasszok')
plt.bar([i + bar_width for i in index], gp_xA_2023_SA['xA'], bar_width, color='orange', label='xA mutató')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Játékos gólpasszok és xA mutatója')
plt.xticks([i + bar_width/2 for i in index], gp_xA_2023_SA['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb gólban szerepet vállaló játékos
top10_ga_SA2023=SA2023.nlargest(10,"G+A")
top10_ga_SA2023=top10_ga_SA2023.sort_values(by="G+A",ascending=False)


plt.bar(top10_ga_SA2023["Player"], top10_ga_SA2023['Gls'], color='skyblue', label='Gól')
plt.bar(top10_ga_SA2023["Player"], top10_ga_SA2023['Ast'], bottom=top10_ga_SA2023['Gls'], color='orange', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb gólban szerepet vállaló játékos')
plt.xticks([i + bar_width/2 for i in index], top10_ga_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 góllövő és hogy ők hány lövésből szereztek annyi gólt amennyit.
top10_scorer_SA2023=SA2023.nlargest(10,"Gls")
top10_scorer_SA2023=top10_ga_SA2023.sort_values(by="G/Sh",ascending=False)

bar_width = 0.4
index = range(len(top10_scorer_SA2023))
plt.bar(index, top10_scorer_SA2023['SoT'], bar_width, color='skyblue', label='Kaput találó lövések száma')
plt.bar([i + bar_width for i in index], top10_scorer_SA2023['Gls'], bar_width, color='orange', label='Gólok száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('#Top 10 góllövő és hogy ők hány lövésből szereztek annyi gólt amennyit (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_scorer_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Pozíciónkénti gólok száma
gls_per_pos_SA2023=SA2023.groupby('Pos')['Gls'].sum().reset_index()
gls_per_pos_SA2023=gls_per_pos_SA2023.sort_values(by="Gls",ascending=False)
plt.figure(figsize=(20, 8))
plt.bar(gls_per_pos_SA2023['Pos'], gls_per_pos_SA2023['Gls'])
plt.xlabel('Pozíció')
plt.ylabel('Gólok száma')
plt.title('Pozíciónkénti gólok száma (2022-23)')

plt.tight_layout()
plt.show()

#Sárga és piros lapok megoszlása
yellow_SA2023=SA2023["CrdY"].sum()
red_SA2023=SA2023["CrdR"].sum()
plt.figure(figsize=(13,6))
plt.title("Sárga és piros lapok megoszlása (2023)")
data=[yellow_SA2023,red_SA2023]
colors=["yellow","red"]
labels=["Sárga lapok","Piros lapok"]
plt.pie(data, labels=labels, colors=colors, autopct="%.0f%%")
plt.show()

#Legtöbb büntetőlappal rendelkező játékosok
SA2023["cardssum"]=SA2023['CrdY']+SA2023['CrdR']
top10_carded_SA2023=SA2023.nlargest(10,"cardssum")
top10_carded_SA2023=top10_carded_SA2023.sort_values(by="cardssum",ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(top10_carded_SA2023["Player"], top10_carded_SA2023['CrdY'], color='yellow', label='Sárga lap')
plt.bar(top10_carded_SA2023["Player"], top10_carded_SA2023['CrdR'], bottom=top10_carded_SA2023['CrdY'], color='red', label='Piros lap')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('Lapok száma')
plt.title('#Top 10 legtöbb büntetőlappal rendelkező játékosok (2022-2023)')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

#Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_SA2023=SA2023[SA2023["Pos"]=="GK"]
KeepertoCompare_SA2023=Keepers_SA2023[Keepers_SA2023["MP"]>=10]
top10_savepercent_SA2023=KeepertoCompare_SA2023.nlargest(10,"Save%")
top10_savepercent_SA2023=top10_savepercent_SA2023.sort_values(by="Save%",ascending=False)

bar_width = 0.4
index = range(len(top10_savepercent_SA2023))
plt.bar(index, top10_savepercent_SA2023['SoTA'], bar_width, color='skyblue', label='Kapott lövések')
plt.bar([i + bar_width for i in index], top10_savepercent_SA2023['GA'], bar_width, color='orange', label='Kapott gólok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 védési hatékonysággal rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_savepercent_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs)
Keepers_SA2023=SA2023[SA2023["Pos"]=="GK"]
KeepertoCompare_SA2023=Keepers_SA2023[Keepers_SA2023["MP"]>=10]
top10_cs_SA2023=KeepertoCompare_SA2023.nlargest(10,"CS%")
top10_cs_SA2023=top10_cs_SA2023.sort_values(by="MP",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_cs_SA2023))
plt.bar(index, top10_cs_SA2023['MP'], bar_width, color='skyblue', label='Lejátszott meccsek száma')
plt.bar([i + bar_width for i in index], top10_cs_SA2023['CS'], bar_width, color='orange', label='Kapott gól nélküli meccsek száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb kapott gól nélküli meccsel rendelkező kapus (minimum 10 lejátszott meccs) (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_cs_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobb passzpontossággal rendelkező játékos
gp_pp_SA2023 = SA2023.groupby('Player').agg({"Ast":'sum','Att':'sum','Cmp':'sum','Cmp%':'sum'}).nlargest(10,'Ast').reset_index()
top10_pp_SA2023=gp_pp_SA2023.sort_values(by="Cmp%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_pp_SA2023))
plt.bar(index, top10_pp_SA2023['Att'], bar_width, color='skyblue', label='Passzok száma')
plt.bar([i + bar_width for i in index], top10_pp_SA2023['Cmp'], bar_width, color='orange', label='Pontos passzok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_pp_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legjobban szerelő játékos
SA2023["Tkl_Tkl%"]=SA2023['TklW']/SA2023['Tkl']*100
top10_tkl_SA2023 = SA2023.groupby('Player').agg({"Tkl":'sum','TklW':'sum','Tkl_Tkl%':'sum'}).nlargest(10,'TklW').reset_index()
top10_tkl_SA2023 = top10_tkl_SA2023.sort_values(by="Tkl_Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_tkl_SA2023))
plt.bar(index, top10_tkl_SA2023['Tkl'], bar_width, color='skyblue', label='Szerelési kísérletek száma')
plt.bar([i + bar_width for i in index], top10_tkl_SA2023['TklW'], bar_width, color='orange', label='Sikeres szerelések száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legjobb passzpontossággal rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_tkl_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb párharcot nyerő játékos
top10_chl_SA2023 = SA2023.groupby('Player').agg({"Challenges_Tkl":'sum','Lost':'sum','Tkl%':'sum'}).nlargest(10,'Challenges_Tkl').reset_index()
top10_chl_SA2023 = top10_chl_SA2023.sort_values(by="Tkl%",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_chl_SA2023["Player"], top10_chl_SA2023['Challenges_Tkl'], color='lightgreen', label='Győztes párharcok')
plt.bar(top10_chl_SA2023["Player"], top10_chl_SA2023['Lost'], bottom=top10_chl_SA2023['Challenges_Tkl'], color='red', label='Vesztes párharcok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb párharcot nyerő játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_chl_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Top 10 legtöbb párharcot nyerő játékos
top10_TklInt_SA2023 = SA2023.groupby('Player').agg({"Tkl":'sum','Int':'sum','Tkl+Int':'sum'}).nlargest(10,'Tkl+Int').reset_index()
top10_TklInt_SA2023 = top10_TklInt_SA2023.sort_values(by="Tkl+Int",ascending=False)

plt.figure(figsize=(15, 6))
plt.bar(top10_TklInt_SA2023["Player"], top10_TklInt_SA2023['Tkl'], color='skyblue', label='Tackle')
plt.bar(top10_TklInt_SA2023["Player"], top10_TklInt_SA2023['Int'], bottom=top10_TklInt_SA2023['Tkl'], color='brown', label='Interception')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Top 10 legtöbb szereléssel és labdaszerzéssel rendelkező játékos (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_TklInt_SA2023['Player'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

#Felszabadítások illetve lövéshez vezető hibák összehasonlítása
SA2023["Player(Team)"]=SA2023["Player"]+ "(" + SA2023["Team"] + ")"
top10_clrerr_SA2023 = SA2023.groupby('Player(Team)').agg({"Clr":'sum','Err':'sum'}).nlargest(10,'Clr').reset_index()
top10_clrerr_SA2023 = top10_clrerr_SA2023.sort_values(by="Clr",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_clrerr_SA2023))
plt.bar(index, top10_clrerr_SA2023['Clr'], bar_width, color='skyblue', label='Szerelési kísérletek száma')
plt.bar([i + bar_width for i in index], top10_clrerr_SA2023['Err'], bar_width, color='orange', label='Sikeres szerelések száma')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_clrerr_SA2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

top_10_error_maker_SA2023 = SA2023.groupby('Player')["Err"].sum().nlargest(10).reset_index()

# Oszlopdiagram létrehozása
plt.figure(figsize=(10, 6))
plt.bar(top_10_error_maker_SA2023['Player'], top_10_error_maker_SA2023['Err'], color='skyblue')
plt.xlabel('Játékos')
plt.ylabel('Lövéshez vezető hibák száma')
plt.title('Top 10 legtöbb adó (2022-23)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Top 10 legtöbb fejpárbajt nyerő játékos
SA2023["Player(Team)"]=SA2023["Player"]+ "(" + SA2023["Team"] + ")"
top10_airduel_SA2023 = SA2023.groupby('Player(Team)').agg({"Won":'sum','Lost':'sum'}).nlargest(10,'Won').reset_index()
top10_airduel_SA2023 = top10_airduel_SA2023.sort_values(by="Won",ascending=False)

plt.figure(figsize=(15, 6))
bar_width = 0.4
index = range(len(top10_airduel_SA2023))
plt.bar(index, top10_airduel_SA2023['Won'], bar_width, color='skyblue', label='Megnyert fejpárbajok')
plt.bar([i + bar_width for i in index], top10_airduel_SA2023['Lost'], bar_width, color='orange', label='Elveszett fejpárbajok')

# Tengelyfeliratok beállítása
plt.xlabel('Játékos')
plt.ylabel('')
plt.title('Felszabadítások illetve lövéshez vezető hibák összehasonlítása (2022-2023)')
plt.xticks([i + bar_width/2 for i in index], top10_airduel_SA2023['Player(Team)'], rotation=45, ha='right')

plt.legend()
plt.tight_layout()
plt.show()

"""####Összefüggések keresése

Bizonoys játékosok statisztikái feltűnően gyengébbek az elvártnál, ezért meg szeretném vizsgálni, hogy ezen játékosok mélyrepülése hogyan hatott a csapatuk teljesítményére. Ehhez szükségem volt a bajnoki tabellára
"""

SA_table=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/SeriaA_tables.csv")

SA_table

del SA_table["Unnamed: 0"]

SA_table

"""#####Serie A tabella 2022-2023"""

SA_table_2023=SA_table[SA_table["Season"]=="2022-2023"]
SA_table_2023

"""#####A Napoli diadala"""

Napoli=SA_table[SA_table["Squad"]=="Napoli"]
Napoli=Napoli[["Rk","Season"]].sort_values(by='Season', ascending=True)

xpoints = np.array(Napoli["Season"])
ypoints = np.array(Napoli["Rk"])

plt.figure(figsize=(10, 6))

plt.plot(xpoints, Napoli["Rk"], label='Helyezés', marker='s')

plt.title('A Napoli elmúlt 5 évben elért bajnoki helyezései', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Helyezés', fontsize=12)
plt.legend()
plt.show()

"""Mint az látható a Napoli a 2022-2023-as szezonban felért a csúcsra azáltal, hogy bajnoki címet nyert. A társaság utoljára a 2018/2019-es szezonban volt a legközelebb ehhez, akkor másodikak lettek. Megvizsgáltam hát a meghatározó játékosainak teljesítményét."""

Napoli=SA_table[SA_table["Squad"]=="Napoli"]
Napoli_gf_ga=Napoli[["Season","GF","GA"]].sort_values(by='Season', ascending=True)

gf = np.array(Napoli_gf_ga["GF"])
ga = np.array(Napoli_gf_ga["GA"])


plt.figure(figsize=(10, 6))

plt.plot(Napoli_gf_ga["Season"],gf, label='Szerzett gólok', marker='o')
plt.plot(Napoli_gf_ga["Season"],ga, label='Kapott gólok', marker='s')

plt.title('Napoli lőtt és kapott góljai az elmúlt 5 szezonban', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Lőtt és kapott gólok', fontsize=12)


plt.legend()


plt.show()

"""Az ábrából kitűnik, hogy a korábbi évekhez képest sokkal több gólt rúgtak és sokkal kevesebb gólt kaptak. Így a támadók és a védők teljesítményét egyaránt meg kell vizsgálni.

######Támadók
"""

Napoli2022_2023=SA2023[SA2023["Team"]=="Napoli"]
Napoli2022_2023_att=Napoli2022_2023[Napoli2022_2023['Pos'].str.contains(r'\bFW\b')]
Napoli2022_2023_att

SA2019=SA[SA["Season"]=="2018-2019"]
Napoli2019=SA2019[SA2019["Team"]=="Napoli"]
Napoli2019=Napoli2019[Napoli2019["Pos"].str.contains(r'\bFW\b')]
Napoli2019=Napoli2019.sort_values(by="Gls",ascending=False).head(1)
Napoli2019

SA2020=SA[SA["Season"]=="2019-2020"]
Napoli2020=SA2020[SA2020["Team"]=="Napoli"]
Napoli2020=Napoli2020[Napoli2020["Pos"].str.contains(r'\bFW\b')]
Napoli2020=Napoli2020.sort_values(by="Gls",ascending=False).head(1)
Napoli2020

#Victor Osimhen
#Osimhen nem volt mind az 5 vizsált szezonban a Napoli játékosa így olyan játékosokat kell keresni arra a 2 szezonra akik sok gólt lőttek
#Arkadiusz Milik lett ez a játékos, a 2018-2019 és a 2019-2020-as szezonban az ő statisztikáját vettük alapból

Osimhen=SA[SA["Player"]=="Victor Osimhen"]
Nap_Att=pd.concat([Osimhen,Napoli2020,Napoli2019])
Nap_Att=Nap_Att[["Gls","Ast","Season(Player)"]].sort_values(by='Season(Player)', ascending=True)

gls = np.array(Nap_Att["Gls"])
ast = np.array(Nap_Att["Ast"])


plt.figure(figsize=(10, 6))

plt.plot(Nap_Att["Season(Player)"], gls, label='Gólok', marker='o')
plt.plot(Nap_Att["Season(Player)"], ast, label='Gólpasszok', marker='s')

plt.title('Victor Osimhen góljainak és gólpasszainak viszonyítása a többi az "elődjeihez"', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)
plt.xticks(rotation=45)

plt.legend()


plt.show()

SA2019=SA[SA["Season"]=="2018-2019"]
Napoli2019=SA2019[SA2019["Team"]=="Napoli"]
Napoli2019=Napoli2019[Napoli2019["Pos"].str.contains(r'\bFW\b')]
Napoli2019GA=Napoli2019.sort_values(by="G+A",ascending=False).head(1)
Napoli2019GA

SA2020=SA[SA["Season"]=="2019-2020"]
Napoli2020=SA2020[SA2020["Team"]=="Napoli"]
Napoli2020=Napoli2020[Napoli2020["Pos"].str.contains(r'\bFW\b')]
Napoli2020GA=Napoli2020.sort_values(by="G+A",ascending=False).head(1)
Napoli2020GA

SA2021=SA[SA["Season"]=="2020-2021"]
Napoli2021=SA2021[SA2021["Team"]=="Napoli"]
Napoli2021=Napoli2021[Napoli2021["Pos"].str.contains(r'\bFW\b')]
Napoli2021GA=Napoli2021.sort_values(by="G+A",ascending=False).head(1)
Napoli2021GA

SA2022=SA[SA["Season"]=="2021-2022"]
Napoli2022=SA2022[SA2022["Team"]=="Napoli"]
Napoli2022=Napoli2022[Napoli2022["Pos"].str.contains(r'\bFW\b')]
Napoli2022GA=Napoli2022.sort_values(by="G+A",ascending=False).head(1)
Napoli2022GA

#Khvicha Kvaratskhelia
#Kvaratskhelia nem volt mind az 5 vizsgált szezonban a Napoli játékosa így olyan játékosokat kell keresni arra a 4 szezonra akik sok gólt lőttek
#Dries Mertens és Lorenzo Insigne lettek ezek a játékosok, a 2018-2019 és a 2019-2020-as szezonban az ő statisztikáját vettük alapból, mert hasonlóan Kvaratskheliahoz, ő is jeleskedett a góllövésben, a gólpasszadásban is
Kvaratskhelia=SA[SA["Player"]=="Khvicha Kvaratskhelia"]
Nap_Att2=pd.concat([Kvaratskhelia,Napoli2022GA,Napoli2021GA,Napoli2020GA,Napoli2019GA])
Nap_Att2=Nap_Att2[["Gls","Ast","Season(Player)",]].sort_values(by='Season(Player)', ascending=True)



gls = np.array(Nap_Att2["Gls"])
ast = np.array(Nap_Att2["Ast"])

# Az ábra inicializálása
plt.figure(figsize=(15, 6))  # Ábra mérete

# Gólok vonalának hozzáadása az ábrához
plt.plot(Nap_Att2["Season(Player)"], gls, label='Gólok', marker='o')

# Asszisztok vonalának hozzáadása az ábrához
plt.plot(Nap_Att2["Season(Player)"], ast, label='Gólpasszok', marker='s')

# Az ábra címe és tengelyfeliratai
plt.title('Khvicha Kvaratskhelia góljai és gólpasszai szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)
plt.xticks(rotation=45)
# Az ábra jelmagyarázata (legend)
plt.legend()

# Az ábra megjelenítése
plt.show()

"""A vizsgált játékosok húzóemberei voltak az évek alatt a Napoli támadójátékának, és sikerült úgy pótolni a távozott támadókat, hogy a hatékonyság és lendület nem kopott ki a Napoli támadójátékából, ugyanis mint látjuk az együttesnek a góllövéssel nem volt gondja az évek során, és ezt fent is tudták tartani.

######Védők
"""

Napoli2022_2023=SA2023[SA2023["Team"]=="Napoli"]
Napoli2022_2023_df=Napoli2022_2023[Napoli2022_2023['Pos']=="DF"]
Napoli2022_2023_df=Napoli2022_2023_df[Napoli2022_2023['Starts']>=12]
Napoli2022_2023_df

#Giovanni Di Lorenzo
Lorenzo=SA[SA['Player']=="Giovanni Di Lorenzo"]
#Lorenzo.loc[len(Castagne)] = {'Ast': 0, 'Clr':0,'Season': "2018-2019",'TklW': 0,'Challenges_Tkl': 0,'Int': 0,'Won': 0,'Err': 0}
#Lorenzo.loc[len(Castagne)] = {'Ast': 0, 'Clr':0,'Season': "2019-2020",'TklW': 0,'Challenges_Tkl': 0,'Int': 0,'Won': 0,'Err': 0}
Lorenzo=Lorenzo[["Ast","Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season"]].sort_values(by='Season', ascending=True)

Clr = np.array(Lorenzo["Clr"])
TklW = np.array(Lorenzo["TklW"])
Int = np.array(Lorenzo["Int"])
Challenges_Tkl=np.array(Lorenzo["Challenges_Tkl"])
Won = np.array(Lorenzo["Won"])
Lost = np.array(Lorenzo["Lost"])
Err= np.array(Lorenzo["Err"])
Ast=np.array(Lorenzo["Ast"])

plt.figure(figsize=(10, 6))


plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')
plt.plot(xpoints, Ast, label='Gólpasszok', marker='s')

plt.title('Giovanni Di Lorenzo meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

Koulibaly = SA[SA["Player"]=="Kalidou Koulibaly"]
Koulibaly

#Kim Min-jae
#Kim Min-jae nem volt mind az 5 vizsgált szezonban a Napoli játékosa így olyan játékosokat kell keresni arra a 4 szezonra akik alapemberei voltak a védelemnek
#Kalidou Koulibaly lett a kiválasztott, hasonló szerepköre és stabil teljesítménye miatt
Kim=SA[SA["Player"]=="Kim Min-jae"]
Kim=pd.concat([Kim,Koulibaly])
Kim=Kim[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season(Player)"]].sort_values(by='Season(Player)', ascending=True)



Clr = np.array(Kim["Clr"])
TklW = np.array(Kim["TklW"])
Int = np.array(Kim["Int"])
Challenges_Tkl=np.array(Kim["Challenges_Tkl"])
Won = np.array(Kim["Won"])
Lost = np.array(Kim["Lost"])
Err= np.array(Kim["Err"])


# Az ábra inicializálása
plt.figure(figsize=(15, 6))  # Ábra mérete

plt.plot(Kim['Season(Player)'], Clr, label='Tisztázások', marker='o')
plt.plot(Kim['Season(Player)'], TklW, label='Sikeres szerelések', marker='s')
plt.plot(Kim['Season(Player)'], Int, label='Közbelépések', marker='s')
plt.plot(Kim['Season(Player)'], Won, label='Nyert fejpárbajok', marker='s')
plt.plot(Kim['Season(Player)'], Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(Kim['Season(Player)'], Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(Kim['Season(Player)'], Err, label='Lövéshez vezető  hibák', marker='s')


# Az ábra címe és tengelyfeliratai
plt.title('Kim Min-jae meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)
plt.xticks(rotation=45)
# Az ábra jelmagyarázata (legend)
plt.legend()

# Az ábra megjelenítése
plt.show()

#Amir Rrahmani
Rrahmani=SA[SA["Player"]=="Amir Rrahmani"]
Rrahmani.loc[len(Rrahmani)] = {'Ast': 0, 'Clr':0,'TklW': 0,'Challenges_Tkl': 0,'Int': 0,'Won': 0, 'Lost':0,'Err': 0, 'Season(Player)': "2018-2019(Amir Rrahmani)"} #Mivel nála csak egy szezon hiányzik így ott az adatokat feltöltöm nullával
Rrahmani=Rrahmani[["Clr","TklW","Challenges_Tkl","Int","Won","Lost","Err","Season(Player)"]].sort_values(by='Season(Player)', ascending=True)



Clr = np.array(Rrahmani["Clr"])
TklW = np.array(Rrahmani["TklW"])
Int = np.array(Rrahmani["Int"])
Challenges_Tkl=np.array(Rrahmani["Challenges_Tkl"])
Won = np.array(Rrahmani["Won"])
Lost = np.array(Rrahmani["Lost"])
Err= np.array(Rrahmani["Err"])


# Az ábra inicializálása
plt.figure(figsize=(15, 6))  # Ábra mérete

plt.plot(xpoints, Clr, label='Tisztázások', marker='o')
plt.plot(xpoints, TklW, label='Sikeres szerelések', marker='s')
plt.plot(xpoints, Int, label='Közbelépések', marker='s')
plt.plot(xpoints, Won, label='Nyert fejpárbajok', marker='s')
plt.plot(xpoints, Lost, label='Elvesztett fejpárbajok', marker='s')
plt.plot(xpoints, Challenges_Tkl, label='Nyert párharcok', marker='s')
plt.plot(xpoints, Err, label='Lövéshez vezető  hibák', marker='s')


# Az ábra címe és tengelyfeliratai
plt.title('Amir Rrahmani meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('Gólok / Gólpasszok', fontsize=12)
plt.xticks(rotation=45)
# Az ábra jelmagyarázata (legend)
plt.legend()

# Az ábra megjelenítése
plt.show()

"""A védők esetében javulás fedezhető fel az előző szenokhoz képest a legtöbb mutatóban.

######Kapus(ok)
"""

Napoli2022_2023=SA2023[SA2023["Team"]=="Napoli"]
Napoli2022_2023_gk=Napoli2022_2023[Napoli2022_2023['Pos']=="GK"]
Napoli2022_2023_gk=Napoli2022_2023_gk[Napoli2022_2023['Starts']>=26]
Napoli2022_2023_gk

#Alex Meret
Meret=SA[SA["Player"]=="Alex Meret"]
Meret=Meret[["Player","GA","Saves","Save%","PK_Save%","CS","Season"]].sort_values(by='Season', ascending=True)

GA = np.array(Meret["GA"])
Save = np.array(Meret["Save%"])
PK_Save = np.array(Meret["PK_Save%"])
CS=np.array(Meret["CS"])
Saves = np.array(Meret["Saves"])

plt.figure(figsize=(10, 6))
plt.plot(xpoints, Saves, label='Védések', marker='s')
plt.plot(xpoints, GA, label='Kapott gólok', marker='o')
plt.plot(xpoints, Save, label='Védési hatékonyság', marker='s')
plt.plot(xpoints, PK_Save, label='Büntető védési hatékonyság', marker='s')
plt.plot(xpoints, CS, label='Kapott gól nélküli meccsek', marker='s')


plt.title('Kapusok meghatározó statisztikáinak alakulása szezononként', fontsize=14)
plt.xlabel('Szezon', fontsize=12)
plt.ylabel('', fontsize=12)
plt.legend()
plt.show()

"""Kapusok terén, megállapítható hogy Alex Meret teljesítménye minden szezonnal jobb és jobb lett, a futball egyik alapszabálya pedig, hogy végy egy jó kapust.

######**ÖSSZEGZÉS**
Összességében elmondható, hogy a Napoli sikerének záloga az volt, hogy ebben az 5 évben a csapatrészek úgy cserélődtek ki, hogy nem következett be minőségbeli romlás, sőt bizonyos játékos teljesítménye javult a szezonok során.

#Predicting the Ballon d'Or winner
A minden verseny sorozatban elért játékos mutatókat egyesítem 1 nagy .csv fileba, és az aranylabdával kapcsolatos predikciókat végzek rajta

##A játékosok minden versenysorozatban elért statisztikáinak (...All_vegleges.csv file) beolvasása és utótisztítása majd egyesítése

###Bundesliga
"""

BL_All=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/BL_All_vegleges.csv")
BL_All

del BL_All["Unnamed: 0"]

pd.isnull(BL_All).sum()

BL_All=BL_All.fillna(0)

pd.isnull(BL_All).sum()

BL_All.head()

"""###La Liga"""

LaLiga_All=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/LaLiga_All_vegleges.csv")
LaLiga_All

del LaLiga_All["Unnamed: 0"]

pd.isnull(LaLiga_All).sum()

LaLiga_All[pd.isnull(LaLiga_All["Age"])][["Player","Age"]]

LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Max Svensson"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Oscar Medina"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Gustavo Abizanda"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Javier Almerge"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Javito Lopez"]

LaLiga_All[pd.isnull(LaLiga_All["Pos"])][["Player","Nation","MP","Team","Season",'Pos','Age']]

LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Marcos Fernández Cózar"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Blanco"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Santiago García"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Ricardo Visus"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Mamadou N'Diaye"]
LaLiga_All=LaLiga_All[LaLiga_All["Player"]!="Iván Sanz"]

LaLiga_All.loc[LaLiga_All['Player'] == "Hugo Guillamón", 'Nation'] = "es ESP"

LaLiga_All.loc[LaLiga_All['Player'] == "Hugo Guillamón", 'Nation'] = "es ESP"

LaLiga_All[LaLiga_All['Player']=="Hugo Guillamón"]

LaLiga_All=LaLiga_All.fillna(0)

pd.isnull(LaLiga_All).sum()

LaLiga_All.head()

"""###Ligue1"""

Ligue1_All=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/Ligue1_All_vegleges.csv")
Ligue1_All

del Ligue1_All["Unnamed: 0"]

pd.isnull(Ligue1_All).sum()

Ligue1_All[pd.isnull(Ligue1_All["Nation"])][["Player","Nation","MP","Team","Season",'Pos','Age']]

Ligue1_All=Ligue1_All[Ligue1_All["Player"]!="Simon Ngapandouentnbu"]
Ligue1_All=Ligue1_All[Ligue1_All["Player"]!="Guemissongui Ouattara"]
Ligue1_All=Ligue1_All[Ligue1_All["Player"]!="Anthony Walongwa"]
Ligue1_All=Ligue1_All[Ligue1_All["Player"]!="Amir Arli"]

Ligue1_All=Ligue1_All.fillna(0)

pd.isnull(Ligue1_All).sum()

Ligue1_All.head()

"""###Premier League"""

PL_All=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/PL_All_vegleges.csv")
PL_All

del PL_All["Unnamed: 0"]

pd.isnull(PL_All).sum()

PL_All[pd.isnull(PL_All["Age"])][["Player","Nation","MP","Team","Season",'Pos','Age']]

PL_All=PL_All[PL_All["Player"]!="Radek Vítek"]
PL_All=PL_All[PL_All["Player"]!="Diamond Edwards"]
PL_All=PL_All[PL_All["Player"]!="Nico Lawrence"]
PL_All=PL_All[PL_All["Player"]!="Bobby Thomas"]

PL_All=PL_All.fillna(0)

pd.isnull(PL_All).sum()

PL_All.head()

"""###Serie A"""

SA_All=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/SerieA_All_vegleges.csv")
SA_All

del SA_All["Unnamed: 0"]

pd.isnull(SA_All).sum()

SA_All[pd.isnull(SA_All["Nation"])][["Player","Nation","MP","Team","Season",'Pos','Age']]

SA_All=SA_All[SA_All["Player"]!="Roman Lazar"]
SA_All=SA_All[SA_All["Player"]!="Jan Kubala"]
SA_All=SA_All[SA_All["Player"]!="Sinan Gümüş"]
SA_All=SA_All[SA_All["Player"]!="Alessio da Cruz"]

SA_All=SA_All.fillna(0)

pd.isnull(SA_All).sum()

SA_All.head()

"""###Egyesítés"""

ALL=pd.concat([BL_All,LaLiga_All,PL_All,Ligue1_All,SA_All],ignore_index=True)
ALL

ALL.to_csv("All_Stats_Merged.csv")

"""##Az All_Stats_Merged.csv file megfelelő sorainak egyesítése a top10 aranylabda jelölt névsorával

###A 3 .csv file beolvasása, utótisztítása

####Bajnokságok

#####Premier League
"""

PLTable=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/PL_tables.csv")
PLTable

del PLTable["Unnamed: 0"]

"""#####Bundesliga"""

BLTable=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/Bundesliga_tables.csv")
BLTable

del BLTable["Unnamed: 0"]

"""#####SerieA"""

SATable=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/SeriaA_tables.csv")
SATable

del SATable["Unnamed: 0"]

"""#####Ligue1"""

L1Table=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/Ligue1_tables.csv")
L1Table

del L1Table["Unnamed: 0"]

L1Table["Squad"]=L1Table["Squad"].str.replace("Paris S-G","Paris Saint-Germain", regex=False)

L1Table

"""#####La Liga"""

LLTable=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/bajnokságok/LaLiga_tables.csv")
LLTable

del LLTable["Unnamed: 0"]

"""#####A táblák kombinálása, extra oszlopok hozzáadása"""

merge_table=pd.concat([PLTable,LLTable,L1Table,SATable,BLTable],ignore_index=True)
merge_table

merge_table["W/L%"]=merge_table["W"]/merge_table["MP"]

merge_table.rename(columns={"Squad":"Team"},inplace=True)

merge_table.rename(columns={"MP":"Team_MP"},inplace=True)

merge_table.rename(columns={"RK":"Team_RK"},inplace=True)
merge_table.rename(columns={"GF":"Team_GF"},inplace=True)
merge_table.rename(columns={"GA":"Team_GA"},inplace=True)
merge_table.rename(columns={"GD":"Team_GD"},inplace=True)
merge_table.rename(columns={"Pts":"Team_Pts"},inplace=True)

merge_table["Team"]=merge_table["Team"].str.replace("M'Gladbach","Monchengladbach", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Manchester Utd","Manchester United", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Köln","Koln", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Leverkusen","Bayer Leverkusen", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Eint Frankfurt","Eintracht Frankfurt", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Wolves","Wolverhampton Wanderers", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Greuther Fürth","Greuther Furth", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Brighton","Brighton and Hove Albion", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Atlético Madrid","Atletico Madrid", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Saint-Étienne","Saint Etienne", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Düsseldorf","Dusseldorf", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Nürnberg","Nurnberg", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Nott'ham Forest","Nottingham Forest", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Tottenham","Tottenham Hotspur", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Newcastle Utd","Newcastle United", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Almería","Almeria", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Betis","Real Betis", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Cádiz","Cadiz", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Alavés","Alaves", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("West Brom","West Bromwich Albion", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Leganés","Leganes", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("West Ham","West Ham United", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Sheffield Utd","Sheffield United", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Huddersfield","Huddersfield Town", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Inter","Internazionale", regex=False)
merge_table["Team"]=merge_table["Team"].str.replace("Nîmes","Nimes", regex=False)

merge_table[merge_table["Team"]=="Sheffield United"]

merge_table

"""####All_Stats"""

ALL=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/All_Stats_Merged.csv")
ALL

del ALL["Unnamed: 0"]

ALL

ALL[ALL["Player"]=="Rodri"]

index_to_change = ALL[(ALL['Player'] == "Rodri") & (ALL['Team'] == "Real Betis")].index[0]
ALL.at[index_to_change,'Player']= 'Rodri Sánchez'

ALL[ALL["Player"]=="Rodri"]

"""####Aranylabda győztesek"""

BD=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/Aranylabda.csv")
BD

del BD["Unnamed: 0"]

del BD["Team"]

BD["Player"]=BD["Player"].str.replace("Vinícius Júnior","Vinicius Júnior", regex=False)

BD

"""###A 3 file egyesítése

####Mivel 2020-ban a COVID járvány miatt nem osztottak Aranylabdát, így a 2019-2020-as statisztikáit nem veszem figyelembe.
"""

player=ALL[ALL['Season']!="2019-2020"]

player

player["Team"]=player["Team"].str.replace("Paris Saint Germain","Paris Saint-Germain", regex=False)

team=merge_table[merge_table['Season']!="2019-2020"]

del team["Competition"]

team[team["Team"]=="Sheffield Utd"]

"""####Jöjjön az egyesítés"""

combined=player.merge(BD, how="outer", on=["Player","Season"])

combined.head(5)

combined[combined["Team"]=="Sheffield Utd"]

combined[combined['Player']=="Rodri"]

combined[combined['Points']>0]

del combined["Rank"]

combined

combined[["Points","Points%"]]=combined[["Points","Points%"]].fillna(0)

combined

combined.info()

team

stats = combined.merge(team, how="outer", on=["Team","Season"])

stats[["Team","Season","Rk","Player"]]

stats.info()

"""Vannak üres sorok a dataframeben, utána jártam, hogy mi ennek az oka, hogy az egyesítés után 2505 olyan sorom lett amelyben hiányosak az adatok. Megvizsgáltam ezen sorokat és kiderült, hogy a csapat neve a team df-ben bizonyos csapatoknál eltérést mutat a combined df-ben levő csapatnevekhez képest. Ezért a team df-et módosítani kell még a mergelés előtt."""

Test=stats[stats["Rk"].isnull()]
Test["Team"].unique()

team[team["Team"].str.contains("Sheffield ", case=False)]

stats.dtypes

stats= stats.apply(pd.to_numeric,errors="ignore")

stats.dtypes

stats.info()

stats.to_csv("Ballon_d'Dor.csv")

"""##A végleges file felhasználásával, a következő aranylabda győztes meghatározása

###.csv file beimportálása, előtisztítás
"""

Stats=pd.read_csv("/content/drive/MyDrive/Szakdolgozat/Ballon_d'Dor.csv")

del Stats["Unnamed: 0"]

del Stats['npxG.1']

Stats.info()

Stats['Year'] = Stats['Season'].str.split('-').str.get(1)

Stats['Year']=pd.to_numeric(Stats['Year'])

Stats.dtypes

"""###Néhány egyszerűbb kimutatás"""

highest_scoring=Stats[Stats['MP']>30].sort_values("G+A",ascending=False).head(10)
highest_scoring.plot.bar("Player","G+A")

highestperseason=Stats.groupby("Season").apply(lambda x: x.sort_values("G+A", ascending=False).head(1))
highestperseason.plot.bar("Season","G+A")

numeric_columns = Stats.select_dtypes(include=['number']).columns

numeric_columns

Stats[numeric_columns].corr()["Points%"].plot.bar()

"""###A gépi tanulás során használt módszerek

####1. Lineáris modell
"""

Stats.columns

predictors= ['Age', 'MP', 'Starts', 'Min', '90s', 'Gls',
       'Ast', 'G+A', 'G-PK', 'Penalty_Kicks_Made', 'PKatt', 'CrdY', 'CrdR',
       'xG', 'npxG', 'xAG', 'GA', 'SoTA', 'Saves', 'Save%', 'PK_Save%', 'CS',
       'CS%', 'Sh', 'SoT', 'SoT%', 'G/Sh', 'Dist', 'Cmp', 'Att', 'Cmp%',
       'TotDist', 'PrgDist', 'xA', 'Tkl', 'Challenges_Tkl', 'TklW', 'Tkl%',
       'Int', 'Tkl+Int', 'Clr', 'Err', 'Won', 'Lost', 'Won%','Rk', 'Team_MP', 'W', 'D', 'L',
       'Team_GF', 'Team_GA', 'Team_GD', 'Team_Pts', 'W/L%', 'Year']

train=Stats[Stats["Year"]<2023]

test=Stats[Stats["Year"]==2023]

from sklearn.linear_model import Ridge

reg=Ridge(alpha=.1)

reg.fit(train[predictors], train["Points%"])

predictions = reg.predict(test[predictors])

predictions=pd.DataFrame(predictions, columns=["predictions"], index=test.index)

predictions

combination = pd.concat([test[["Player","Points%"]], predictions], axis=1)

combination

combination.sort_values("Points%", ascending=False).head(10)

from sklearn.metrics import mean_squared_error

mean_squared_error(combination["Points%"], combination["predictions"])

combination["Points%"].value_counts()

combination = combination.sort_values("Points%", ascending=False)
combination["Rank"] = list(range(1,combination.shape[0]+1))

combination.head(10)

combination = combination.sort_values("predictions", ascending=False)
combination["Predicted_Rank"] = list(range(1,combination.shape[0]+1))

combination.head()

combination.sort_values("Points%",ascending=False).head(10)

def find_ap(combination):
  actual = combination.sort_values("Points%", ascending=False).head(5)
  predicted = combination.sort_values("predictions", ascending=False)
  ps=[] #precision score
  found=0
  seen=1
  for index, row in predicted.iterrows():
    if row["Player"] in actual["Player"].values:
      found +=1
      ps.append(found/seen)
    seen +=1
  return sum(ps)/len(ps)

find_ap(combination)

"""####2. Backtesting"""

years = list(range(2019,2024))
#aps=average precision score
aps = []
all_predictions = []
for year in years[2:]:
  train = Stats[Stats["Year"]<year]
  test = Stats[Stats["Year"] == year]
  reg.fit(train[predictors], train["Points%"])
  predictions = reg.predict(test[predictors])
  predictions = pd.DataFrame(predictions, columns=["predictions"], index=test.index)
  combination = pd.concat([test[["Player","Points%"]],predictions],axis=1)
  all_predictions.append(combination)
  aps.append(find_ap(combination))

sum(aps) / len(aps)

def add_ranks(combination):
    combination = combination.sort_values("Points%", ascending=False)
    combination["Rank"] = list(range(1,combination.shape[0]+1))
    combination = combination.sort_values("predictions", ascending=False)
    combination["Predicted_Rank"] = list(range(1,combination.shape[0]+1))
    combination["Difference"] = combination["Rank"] - combination["Predicted_Rank"]
    return combination

ranking=add_ranks(all_predictions[1])
ranking[ranking["Rank"]<6].sort_values("Difference", ascending=False)

#Ez egy hívható funkció amivel különböző predictorokat és modelleket tesztelhetünk.
def backtest(stats, model, year, predictors):
  aps = []
  all_predictions = []
  for year in years[2:]:
    train = Stats[Stats["Year"]<year]
    test = Stats[Stats["Year"] == year]
    model.fit(train[predictors], train["Points%"])
    predictions = reg.predict(test[predictors])
    predictions = pd.DataFrame(predictions, columns=["predictions"], index=test.index)
    combination = pd.concat([test[["Player","Points%","Year"]],predictions],axis=1)
    combination = add_ranks(combination)
    all_predictions.append(combination)
    aps.append(find_ap(combination))
  return sum(aps)/len(aps), aps, pd.concat(all_predictions)

mean_ap, aps, all_predictions=backtest(Stats, reg, years[2:], predictors)

mean_ap

"""####A modell teljesítményének diagnózisa"""

all_predictions[all_predictions["Rank"]<6].sort_values("Difference").head(10)

#Ez megmutatja, hogy az algoritmus szerint mely oszlopok a legfontosabb a modell számára
pd.concat([pd.Series(reg.coef_), pd.Series(predictors)], axis=1).sort_values(0, ascending=False)

"""####Új predictorok"""

#A középértkhez viszonyítja a játékosok átlagait
stat_ratios = Stats[["Gls","Ast","G+A"]].apply(lambda x: x/x.mean())
stat_ratios

Stats[["Gls_M","Ast_M","G+A_M"]]=stat_ratios[["Gls","Ast","G+A"]]
Stats

predictors += ["Gls_M","Ast_M","G+A_M"]

mean_ap, aps, all_predictions=backtest(Stats, reg, years[2:], predictors)

mean_ap

Stats["NPos"] = Stats["Pos"].astype("category").cat.codes

Stats.head()

Stats["NTeam"] = Stats["Team"].astype("category").cat.codes

Stats["NTeam"].value_counts()

"""####Random Forest
Ezek a fajta kategóriák nincsenek rendszerezve, tehát a számok amelyeket látunk a "Stats["NTeam"].value_counts()" parancs futtatásakor, nem tudni, hogy melyik kód melyik csapathoz tartozik, semmit mondóak ezek a számok a programnak. Ezért más megközlítést kell alkalmazni, a Random Forestet.
"""

from sklearn.ensemble import RandomForestRegressor

rf=RandomForestRegressor(n_estimators=300, random_state=1, min_samples_split=5)

mean_ap, aps, all_predictions=backtest(Stats, reg, years[2:], predictors)

mean_ap

mean_ap, aps, all_predictions=backtest(Stats, reg, years[2:], predictors)

mean_ap